{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "letter-3d-swap",
  "type": "registry:ui",
  "dependencies": [
    "motion"
  ],
  "author": "daniel petho <https://www.danielpetho.com>",
  "registryDependencies": [
    "https://uwuui.com/r/utils.json"
  ],
  "files": [
    {
      "path": "fancy/text/letter-3d-swap.tsx",
      "content": "\"use client\"\n\nimport React, { ElementType, useCallback, useMemo, useState } from \"react\"\nimport {\n  AnimationOptions,\n  useAnimate,\n  ValueAnimationTransition,\n} from \"motion/react\"\n\nimport { cn } from \"@/lib/utils\"\n\n// handy function to split text into characters with support for unicode and emojis\nconst splitIntoCharacters = (text: string): string[] => {\n  if (typeof Intl !== \"undefined\" && \"Segmenter\" in Intl) {\n    const segmenter = new Intl.Segmenter(\"en\", { granularity: \"grapheme\" })\n    return Array.from(segmenter.segment(text), ({ segment }) => segment)\n  }\n  // Fallback for browsers that don't support Intl.Segmenter\n  return Array.from(text)\n}\n\n// handy function  to extract text from children\nconst extractTextFromChildren = (children: React.ReactNode): string => {\n  if (typeof children === \"string\") return children\n\n  if (React.isValidElement(children)) {\n    const childText = children.props.children\n    if (typeof childText === \"string\") return childText\n    if (React.isValidElement(childText)) {\n      return extractTextFromChildren(childText)\n    }\n  }\n\n  throw new Error(\n    \"Letter3DSwap: Children must be a string or a React element containing a string. \" +\n      \"Complex nested structures are not supported.\"\n  )\n}\n\n/**\n * Internal helper interface for representing a word in the text with its characters and spacing information\n */\ninterface WordObject {\n  /**\n   * Array of individual characters in the word\n   */\n  characters: string[]\n  /**\n   * Whether this word needs a space after it\n   */\n  needsSpace: boolean\n}\n\ninterface Letter3DSwapProps {\n  /**\n   * The content to be displayed and animated\n   */\n  children: React.ReactNode\n\n  /**\n   * HTML Tag to render the component as\n   */\n  as?: ElementType\n  /**\n   * Class name for the main container element.\n   */\n  mainClassName?: string\n\n  /**\n   * Class name for the front face element.\n   */\n  frontFaceClassName?: string\n\n  /**\n   * Class name for the secondary face element.\n   */\n  secondFaceClassName?: string\n\n  /**\n   * Duration of stagger delay between elements in seconds.\n   * @default 0.05\n   */\n  staggerDuration?: number\n\n  /**\n   * Direction to stagger animations from.\n   * @default \"first\"\n   */\n  staggerFrom?: \"first\" | \"last\" | \"center\" | number | \"random\"\n\n  /**\n   * Animation transition configuration.\n   * @default { type: \"spring\", damping: 25, stiffness: 300 }\n   */\n  transition?: ValueAnimationTransition | AnimationOptions\n\n  /**\n   * Direction of rotation\n   * @default \"right\"\n   */\n  rotateDirection?: \"top\" | \"right\" | \"bottom\" | \"left\"\n}\n\nconst Letter3DSwap = ({\n  children,\n  as = \"p\",\n  mainClassName,\n  frontFaceClassName,\n  secondFaceClassName,\n  staggerDuration = 0.05,\n  staggerFrom = \"first\",\n  transition = { type: \"spring\", damping: 30, stiffness: 300 },\n  rotateDirection = \"right\",\n  ...props\n}: Letter3DSwapProps) => {\n  const [isAnimating, setIsAnimating] = useState(false)\n  const [isHovering, setIsHovering] = useState(false)\n  const [scope, animate] = useAnimate()\n\n  // Determine rotation transform based on direction\n  const rotationTransform = (() => {\n    switch (rotateDirection) {\n      case \"top\":\n        return \"rotateX(90deg)\"\n      case \"right\":\n        return \"rotateY(90deg)\"\n      case \"bottom\":\n        return \"rotateX(-90deg)\"\n      case \"left\":\n        return \"rotateY(90deg)\"\n      default:\n        return \"rotateY(-90deg)\"\n    }\n  })()\n\n  // Convert children to string for processing with error handling\n  const text = useMemo(() => {\n    try {\n      return extractTextFromChildren(children)\n    } catch (error) {\n      console.error(error)\n      return \"\"\n    }\n  }, [children])\n\n  // Splitting the text into animation segments\n  const characters = useMemo(() => {\n    const t = text.split(\" \")\n    const result = t.map((word: string, i: number) => ({\n      characters: splitIntoCharacters(word),\n      needsSpace: i !== t.length - 1,\n    }))\n    return result\n  }, [text])\n\n  // Helper function to calculate stagger delay for each text segment\n  const getStaggerDelay = useCallback(\n    (index: number, totalChars: number) => {\n      const total = totalChars\n      if (staggerFrom === \"first\") return index * staggerDuration\n      if (staggerFrom === \"last\") return (total - 1 - index) * staggerDuration\n      if (staggerFrom === \"center\") {\n        const center = Math.floor(total / 2)\n        return Math.abs(center - index) * staggerDuration\n      }\n      if (staggerFrom === \"random\") {\n        const randomIndex = Math.floor(Math.random() * total)\n        return Math.abs(randomIndex - index) * staggerDuration\n      }\n      return Math.abs(staggerFrom - index) * staggerDuration\n    },\n    [staggerFrom, staggerDuration]\n  )\n\n  // Handle hover start - trigger the rotation\n  const handleHoverStart = useCallback(async () => {\n    if (isAnimating || isHovering) return\n\n    setIsHovering(true)\n    setIsAnimating(true)\n\n    const totalChars = characters.reduce(\n      (sum: number, word: WordObject) => sum + word.characters.length,\n      0\n    )\n\n    // Create delays array based on staggerFrom\n    const delays = Array.from({ length: totalChars }, (_, i) => {\n      return getStaggerDelay(i, totalChars)\n    })\n\n    // Animate each character with its specific delay\n    await animate(\n      \".letter-3d-swap-char-box-item\",\n      { transform: rotationTransform },\n      {\n        ...transition,\n        delay: (i: number) => delays[i],\n      }\n    )\n\n    // Reset all boxes\n    await animate(\n      \".letter-3d-swap-char-box-item\",\n      { transform: \"rotateX(0deg) rotateY(0deg)\" },\n      { duration: 0 }\n    )\n\n    setIsAnimating(false)\n  }, [\n    isAnimating,\n    isHovering,\n    characters,\n    transition,\n    getStaggerDelay,\n    rotationTransform,\n    animate,\n  ])\n\n  // Handle hover end\n  const handleHoverEnd = useCallback(() => {\n    setIsHovering(false)\n  }, [])\n\n  const ElementTag = as ?? \"p\"\n\n  return (\n    <ElementTag\n      className={cn(\"flex flex-wrap relative\", mainClassName)}\n      onMouseEnter={handleHoverStart}\n      onMouseLeave={handleHoverEnd}\n      ref={scope}\n      {...props}\n    >\n      <span className=\"sr-only\">{text}</span>\n\n      {characters.map(\n        (wordObj: WordObject, wordIndex: number, array: WordObject[]) => {\n          const previousCharsCount = array\n            .slice(0, wordIndex)\n            .reduce(\n              (sum: number, word: WordObject) => sum + word.characters.length,\n              0\n            )\n\n          return (\n            <span key={wordIndex} className=\"inline-flex\">\n              {wordObj.characters.map((char: string, charIndex: number) => {\n                const totalIndex = previousCharsCount + charIndex\n\n                return (\n                  <CharBox\n                    key={totalIndex}\n                    char={char}\n                    frontFaceClassName={frontFaceClassName}\n                    secondFaceClassName={secondFaceClassName}\n                    rotateDirection={rotateDirection}\n                  />\n                )\n              })}\n              {wordObj.needsSpace && <span className=\"whitespace-pre\"> </span>}\n            </span>\n          )\n        }\n      )}\n    </ElementTag>\n  )\n}\n\ninterface CharBoxProps {\n  char: string\n  frontFaceClassName?: string\n  secondFaceClassName?: string\n  rotateDirection: \"top\" | \"right\" | \"bottom\" | \"left\"\n}\n\nconst CharBox = ({\n  char,\n  frontFaceClassName,\n  secondFaceClassName,\n  rotateDirection,\n}: CharBoxProps) => {\n  // Get the transform for the second face based on rotation direction\n  const getSecondFaceTransform = () => {\n    switch (rotateDirection) {\n      case \"top\":\n        return `rotateX(-90deg) translateZ(0.5lh)`\n      case \"right\":\n        return `rotateY(90deg) translateX(50%) rotateY(-90deg) translateX(-50%) rotateY(-90deg) translateX(50%)`\n      case \"bottom\":\n        return `rotateX(90deg) translateZ(0.5lh)`\n      case \"left\":\n        return `rotateY(90deg) translateX(50%) rotateY(-90deg) translateX(50%) rotateY(-90deg) translateX(50%)`\n      default:\n        return `rotateY(90deg) translateZ(1ch)`\n    }\n  }\n\n  const secondFaceTransform = getSecondFaceTransform()\n\n  return (\n    <span\n      className=\"letter-3d-swap-char-box-item inline-box transform-3d\"\n      style={{\n        transform:\n          rotateDirection === \"top\" || rotateDirection === \"bottom\"\n            ? \"translateZ(-0.5lh)\"\n            : \"rotateY(90deg) translateX(50%) rotateY(-90deg)\",\n      }}\n    >\n      {/* Front face */}\n      <div\n        className={cn(\"relative backface-hidden h-[1lh]\", frontFaceClassName)}\n        style={{\n          transform: `${\n            rotateDirection === \"top\" || rotateDirection === \"bottom\"\n              ? \"translateZ(0.5lh)\"\n              : rotateDirection === \"left\"\n                ? \"rotateY(90deg) translateX(50%) rotateY(-90deg)\"\n                : \"rotateY(-90deg) translateX(50%) rotateY(90deg)\"\n          }`,\n        }}\n      >\n        {char}\n      </div>\n\n      {/* Second face - positioned based on rotation direction */}\n      <span\n        className={cn(\n          \"absolute backface-hidden h-[1lh] top-0 left-0\",\n          secondFaceClassName\n        )}\n        style={{\n          transform: secondFaceTransform,\n        }}\n      >\n        {char}\n      </span>\n    </span>\n  )\n}\n\nLetter3DSwap.displayName = \"Letter3DSwap\"\n\nexport default Letter3DSwap\n",
      "type": "registry:ui",
      "target": "components/fancy/text/letter-3d-swap.tsx"
    }
  ]
}