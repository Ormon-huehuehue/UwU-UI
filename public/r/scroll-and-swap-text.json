{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "scroll-and-swap-text",
  "type": "registry:ui",
  "dependencies": [
    "motion"
  ],
  "author": "daniel petho <https://www.danielpetho.com>",
  "registryDependencies": [
    "https://uwuui.com/r/utils.json"
  ],
  "files": [
    {
      "path": "fancy/text/scroll-and-swap-text.tsx",
      "content": "\"use client\"\n\nimport React, { ElementType, useMemo, useRef } from \"react\"\nimport { motion, useScroll, useTransform, useSpring } from \"motion/react\"\nimport { cn } from \"@/lib/utils\"\n\n// handy function to extract text from children\nconst extractTextFromChildren = (children: React.ReactNode): string => {\n  if (typeof children === \"string\") return children\n\n  if (React.isValidElement(children)) {\n    const childText = children.props.children\n    if (typeof childText === \"string\") return childText\n    if (React.isValidElement(childText)) {\n      return extractTextFromChildren(childText)\n    }\n  }\n\n  throw new Error(\n    \"ScrollAndSwapText: Children must be a string or a React element containing a string. \" +\n      \"Complex nested structures are not supported.\"\n  )\n}\n\ninterface ScrollAndSwapTextProps {\n  /**\n   * The content to be displayed and animated\n   */\n  children: React.ReactNode\n\n  /**\n   * HTML Tag to render the component as\n   * @default \"span\"\n   */\n  as?: ElementType\n\n  /**\n   * Reference to the container element for scroll tracking\n   */\n  containerRef: React.RefObject<HTMLElement>\n\n  /**\n   * Offset configuration for when the animation should start and end relative to the scroll container. Check motion documentation for more details.\n   * @default [\"0 0\", \"0 1\"]\n   */\n  offset?: [string, string]\n\n  /**\n   * Additional CSS classes for styling the component\n   */\n  className?: string\n\n  /**\n   * Spring animation configuration for smoothing the scroll-based animation\n   * @default { stiffness: 200, damping: 30 }\n   */\n  springConfig?: {\n    stiffness?: number\n    damping?: number\n    mass?: number\n  }\n}\n\n/**\n * ScrollAndSwapText creates a scroll-triggered text animation where text slides vertically\n * based on scroll progress.\n */\nconst ScrollAndSwapText = ({\n  children,\n  as = \"span\",\n  offset = [\"0 0\", \"0 1\"],\n  className,\n  containerRef,\n  springConfig = { stiffness: 200, damping: 30 },\n  ...props\n}: ScrollAndSwapTextProps) => {\n  const ref = useRef<HTMLElement>(null)\n\n  // Convert children to string for processing with error handling\n  const text = useMemo(() => {\n    try {\n      return extractTextFromChildren(children)\n    } catch (error) {\n      console.error(error)\n      return \"\"\n    }\n  }, [children])\n\n  // Track scroll progress within the specified container and target element\n  const { scrollYProgress } = useScroll({\n    container: containerRef,\n    target: ref,\n    offset: offset as any, // framer motion doesnt export the type, so we have to cast it, sorry :/\n    layoutEffect: false,\n  })\n\n  // Apply spring physics to smooth the scroll-based animation\n  const springScrollYProgress = useSpring(scrollYProgress, springConfig)\n\n  // Transform scroll progress into vertical translation values\n  // Original text moves from 0% to -100% (slides up and out)\n  const top = useTransform(springScrollYProgress, [0, 1], [\"0%\", \"-100%\"])\n  // Replacement text moves from 100% to 0% (slides up from below)\n  const bottom = useTransform(springScrollYProgress, [0, 1], [\"100%\", \"0%\"])\n\n  const ElementTag = as\n\n  return (\n    <ElementTag\n      className={cn(\"flex overflow-hidden relative items-center justify-center p-0\", className)}\n      ref={ref}\n      {...props}\n    >\n\n      <span className=\"relative text-transparent\" aria-hidden=\"true\">\n        {text}\n      </span>\n      \n      <motion.span className=\"absolute\" style={{ top: top }}>\n        {text}\n      </motion.span>\n      \n      <motion.span\n        className=\"absolute\"\n        style={{ top: bottom }}\n        aria-hidden=\"true\"\n      >\n        {text}\n      </motion.span>\n    </ElementTag>\n  )\n}\n\nScrollAndSwapText.displayName = \"ScrollAndSwapText\"\n\nexport default ScrollAndSwapText\n",
      "type": "registry:ui",
      "target": "components/fancy/text/scroll-and-swap-text.tsx"
    }
  ]
}