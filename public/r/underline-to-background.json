{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "underline-to-background",
  "type": "registry:ui",
  "dependencies": [
    "motion"
  ],
  "author": "daniel petho <https://www.danielpetho.com>",
  "registryDependencies": [
    "https://uwuui.com/r/utils.json"
  ],
  "files": [
    {
      "path": "fancy/text/underline-to-background.tsx",
      "content": "\"use client\"\n\nimport { ElementType, useEffect, useMemo, useRef } from \"react\"\nimport { motion, ValueAnimationTransition } from \"motion/react\"\n\nimport { cn } from \"@/lib/utils\"\n\ninterface UnderlineProps {\n  /**\n   * The content to be displayed and animated\n   */\n  children: React.ReactNode\n\n  /**\n   * HTML Tag to render the component as\n   * @default span\n   */\n  as?: ElementType\n\n  /**\n   * Optional class name for styling\n   */\n  className?: string\n\n  /**\n   * Animation transition configuration\n   * @default { type: \"spring\", damping: 30, stiffness: 300 }\n   */\n  transition?: ValueAnimationTransition\n\n  /**\n   * The color that the text will animate to on hover\n   */\n  targetTextColor: string\n\n  /**\n   * Height of the underline as a ratio of font size\n   * @default 0.1\n   */\n  underlineHeightRatio?: number\n\n  /**\n   * Padding of the underline as a ratio of font size\n   * @default 0.01\n   */\n  underlinePaddingRatio?: number\n}\n\nconst UnderlineToBackground = ({\n  children,\n  as,\n  className,\n  transition = { type: \"spring\", damping: 30, stiffness: 300 },\n  underlineHeightRatio = 0.1, // Default to 10% of font size\n  underlinePaddingRatio = 0.01, // Default to 1% of font size\n  targetTextColor = \"#fef\",\n  ...props\n}: UnderlineProps) => {\n  const textRef = useRef<HTMLSpanElement>(null)\n\n  // Create custom motion component based on the 'as' prop\n  const MotionComponent = useMemo(() => motion.create(as ?? \"span\"), [as])\n\n  // Update CSS custom properties based on font size\n  useEffect(() => {\n    const updateUnderlineStyles = () => {\n      if (textRef.current) {\n        const fontSize = parseFloat(getComputedStyle(textRef.current).fontSize)\n        const underlineHeight = fontSize * underlineHeightRatio\n        const underlinePadding = fontSize * underlinePaddingRatio\n        textRef.current.style.setProperty(\n          \"--underline-height\",\n          `${underlineHeight}px`\n        )\n        textRef.current.style.setProperty(\n          \"--underline-padding\",\n          `${underlinePadding}px`\n        )\n      }\n    }\n\n    updateUnderlineStyles()\n    window.addEventListener(\"resize\", updateUnderlineStyles)\n\n    return () => window.removeEventListener(\"resize\", updateUnderlineStyles)\n  }, [underlineHeightRatio, underlinePaddingRatio])\n\n  // Animation variants for the underline background\n  const underlineVariants = {\n    initial: {\n      height: \"var(--underline-height)\",\n    },\n    target: {\n      height: \"100%\",\n      transition: transition,\n    },\n  }\n\n  // Animation variants for the text color\n  const textVariants = {\n    initial: {\n      color: \"currentColor\",\n    },\n    target: {\n      color: targetTextColor,\n      transition: transition,\n    },\n  }\n\n  return (\n    <MotionComponent\n      className={cn(\"relative inline-block cursor-pointer\", className)}\n      whileHover=\"target\"\n      ref={textRef}\n      {...props}\n    >\n      <motion.div\n        className=\"absolute bg-current w-full\"\n        style={{\n          height: \"var(--underline-height)\",\n          bottom: \"calc(-1 * var(--underline-padding))\",\n        }}\n        variants={underlineVariants}\n        aria-hidden=\"true\"\n      />\n      <motion.span variants={textVariants} className=\"text-current relative\">\n        {children}\n      </motion.span>\n    </MotionComponent>\n  )\n}\n\nUnderlineToBackground.displayName = \"UnderlineToBackground\"\n\nexport default UnderlineToBackground\n",
      "type": "registry:ui",
      "target": "components/fancy/text/underline-to-background.tsx"
    }
  ]
}