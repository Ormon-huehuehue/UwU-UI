{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "text-cursor-proximity",
  "type": "registry:ui",
  "dependencies": [
    "motion"
  ],
  "author": "daniel petho <https://www.danielpetho.com>",
  "registryDependencies": [
    "https://uwuui.com/r/use-mouse-position-ref.json",
    "https://uwuui.com/r/utils.json"
  ],
  "files": [
    {
      "path": "fancy/text/text-cursor-proximity.tsx",
      "content": "\"use client\"\n\nimport React, { CSSProperties, ElementType, forwardRef, useRef, useMemo } from \"react\"\nimport {\n  motion,\n  useAnimationFrame,\n  useMotionValue,\n  useTransform,\n} from \"motion/react\"\n\nimport { useMousePositionRef } from \"@/hooks/use-mouse-position-ref\"\nimport { cn } from \"@/lib/utils\"\n\n// Helper type that makes all properties of CSSProperties accept number | string\ntype CSSPropertiesWithValues = {\n  [K in keyof CSSProperties]: string | number\n}\n\ninterface StyleValue<T extends keyof CSSPropertiesWithValues> {\n  from: CSSPropertiesWithValues[T]\n  to: CSSPropertiesWithValues[T]\n}\n\ninterface TextProps extends React.HTMLAttributes<HTMLSpanElement> {\n  /**\n   * The content to be displayed and animated\n   */\n  children: React.ReactNode\n\n  /**\n   * HTML Tag to render the component as\n   * @default span\n   */\n  as?: ElementType\n\n  /**\n   * Object containing style properties to animate\n   * Each property should have 'from' and 'to' values\n   */\n  styles: Partial<{\n    [K in keyof CSSPropertiesWithValues]: StyleValue<K>\n  }>\n\n  /**\n   * Reference to the container element for mouse position calculations\n   */\n  containerRef: React.RefObject<HTMLDivElement>\n\n  /**\n   * Radius of the proximity effect in pixels\n   * @default 50\n   */\n  radius?: number\n\n  /**\n   * Type of falloff function to use for the proximity effect\n   * @default \"linear\"\n   */\n  falloff?: \"linear\" | \"exponential\" | \"gaussian\"\n}\n\nconst TextCursorProximity = forwardRef<HTMLSpanElement, TextProps>(\n  (\n    {\n      children,\n      as,\n      styles,\n      containerRef,\n      radius = 50,\n      falloff = \"linear\",\n      className,\n      ...props\n    },\n    ref\n  ) => {\n    const MotionComponent = useMemo(() => motion.create(as ?? \"span\"), [as])\n    const letterRefs = useRef<(HTMLSpanElement | null)[]>([])\n    const mousePositionRef = useMousePositionRef(containerRef)\n\n    // Convert children to string for letter processing\n    const text = React.Children.toArray(children).join(\"\")\n\n    // Create a motion value for each letter's proximity\n    const letterProximities = useRef(\n      Array(text.replace(/\\s/g, \"\").length)\n        .fill(0)\n        .map(() => useMotionValue(0))\n    )\n\n    const calculateDistance = (\n      x1: number,\n      y1: number,\n      x2: number,\n      y2: number\n    ): number => {\n      return Math.sqrt(Math.pow(x2 - x1, 2) + Math.pow(y2 - y1, 2))\n    }\n\n    const calculateFalloff = (distance: number): number => {\n      const normalizedDistance = Math.min(Math.max(1 - distance / radius, 0), 1)\n\n      switch (falloff) {\n        case \"exponential\":\n          return Math.pow(normalizedDistance, 2)\n        case \"gaussian\":\n          return Math.exp(-Math.pow(distance / (radius / 2), 2) / 2)\n        case \"linear\":\n        default:\n          return normalizedDistance\n      }\n    }\n\n    useAnimationFrame(() => {\n      if (!containerRef.current) return\n      const containerRect = containerRef.current.getBoundingClientRect()\n\n      letterRefs.current.forEach((letterRef, index) => {\n        if (!letterRef) return\n\n        const rect = letterRef.getBoundingClientRect()\n        const letterCenterX = rect.left + rect.width / 2 - containerRect.left\n        const letterCenterY = rect.top + rect.height / 2 - containerRect.top\n\n        const distance = calculateDistance(\n          mousePositionRef.current.x,\n          mousePositionRef.current.y,\n          letterCenterX,\n          letterCenterY\n        )\n\n        const proximity = calculateFalloff(distance)\n        letterProximities.current[index].set(proximity)\n      })\n    })\n\n    const words = text.split(\" \")\n    let letterIndex = 0\n\n    return (\n      <MotionComponent\n        ref={ref}\n        className={cn(\"\", className)}\n        {...props}\n      >\n        {words.map((word, wordIndex) => (\n          <span\n            key={wordIndex}\n            className=\"inline-block\"\n            aria-hidden={true}\n          >\n            {word.split(\"\").map((letter) => {\n              const currentLetterIndex = letterIndex++\n              const proximity = letterProximities.current[currentLetterIndex]\n\n              // Create transformed values for each style property\n              const transformedStyles = Object.entries(styles).reduce(\n                (acc, [key, value]) => {\n                  acc[key] = useTransform(\n                    proximity,\n                    [0, 1],\n                    [value.from, value.to]\n                  )\n                  return acc\n                },\n                {} as Record<string, any>\n              )\n\n              return (\n                <motion.span\n                  key={currentLetterIndex}\n                  ref={(el: HTMLSpanElement | null) => {\n                    letterRefs.current[currentLetterIndex] = el\n                  }}\n                  className=\"inline-block\"\n                  aria-hidden=\"true\"\n                  style={transformedStyles}\n                >\n                  {letter}\n                </motion.span>\n              )\n            })}\n            {wordIndex < words.length - 1 && (\n              <span className=\"inline-block\">&nbsp;</span>\n            )}\n          </span>\n        ))}\n        <span className=\"sr-only\">{text}</span>\n      </MotionComponent>\n    )\n  }\n)\n\nTextCursorProximity.displayName = \"TextCursorProximity\"\nexport default TextCursorProximity\n",
      "type": "registry:ui",
      "target": "components/fancy/text/text-cursor-proximity.tsx"
    }
  ]
}