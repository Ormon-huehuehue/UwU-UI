{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "text-along-path",
  "type": "registry:ui",
  "dependencies": [
    "motion"
  ],
  "author": "daniel petho <https://www.danielpetho.com>",
  "files": [
    {
      "path": "fancy/text/text-along-path.tsx",
      "content": "import { RefObject, useEffect, useRef } from \"react\"\nimport { useScroll, UseScrollOptions, useTransform } from \"motion/react\"\n\ntype PreserveAspectRatioAlign =\n  | \"none\"\n  | \"xMinYMin\"\n  | \"xMidYMin\"\n  | \"xMaxYMin\"\n  | \"xMinYMid\"\n  | \"xMidYMid\"\n  | \"xMaxYMid\"\n  | \"xMinYMax\"\n  | \"xMidYMax\"\n  | \"xMaxYMax\"\n\ntype PreserveAspectRatioMeetOrSlice = \"meet\" | \"slice\"\n\ntype PreserveAspectRatio =\n  | PreserveAspectRatioAlign\n  | `${Exclude<PreserveAspectRatioAlign, \"none\">} ${PreserveAspectRatioMeetOrSlice}`\n\ninterface AnimatedPathTextProps {\n  // Path properties\n  path: string\n  pathId?: string\n  pathClassName?: string\n  preserveAspectRatio?: PreserveAspectRatio\n  showPath?: boolean\n\n  // SVG properties\n  width?: string | number\n  height?: string | number\n  viewBox?: string\n  svgClassName?: string\n\n  // Text properties\n  text: string\n  textClassName?: string\n  textAnchor?: \"start\" | \"middle\" | \"end\"\n\n  // Animation properties\n  animationType?: \"auto\" | \"scroll\"\n\n  // Animation properties if animationType is auto\n  duration?: number\n  repeatCount?: number | \"indefinite\"\n  easingFunction?: {\n    calcMode?: string\n    keyTimes?: string\n    keySplines?: string\n  }\n\n  // Scroll animation properties if animationType is scroll\n  scrollContainer?: RefObject<HTMLElement>\n  scrollOffset?: UseScrollOptions[\"offset\"]\n  scrollTransformValues?: [number, number]\n}\n\nconst AnimatedPathText = ({\n  // Path defaults\n  path,\n  pathId,\n  pathClassName,\n  preserveAspectRatio = \"xMidYMid meet\",\n  showPath = false,\n\n  // SVG defaults\n  width = \"100%\",\n  height = \"100%\",\n  viewBox = \"0 0 100 100\",\n  svgClassName,\n\n  // Text defaults\n  text,\n  textClassName,\n  textAnchor = \"start\",\n\n  // Animation type\n  animationType = \"auto\",\n\n  // Animation defaults\n  duration = 4,\n  repeatCount = \"indefinite\",\n\n  easingFunction = {},\n\n  // Scroll animation defaults\n  scrollContainer,\n  scrollOffset = [\"start end\", \"end end\"],\n  scrollTransformValues = [0, 100],\n}: AnimatedPathTextProps) => {\n  const container = useRef<HTMLDivElement>(null)\n  const textPathRefs = useRef<SVGTextPathElement[]>([])\n\n  // naive id for the path. you should rather use yours :)\n  const id =\n    pathId || `animated-path-${Math.random().toString(36).substring(7)}`\n\n  const { scrollYProgress } = useScroll({\n    container: scrollContainer || container,\n    offset: scrollOffset,\n  })\n\n  const t = useTransform(scrollYProgress, [0, 1], scrollTransformValues)\n\n  useEffect(() => {\n    // Re-initialize scroll handler when container ref changes\n    const handleChange = (e: number) => {\n      textPathRefs.current.forEach((textPath) => {\n        if (textPath) {\n          textPath.setAttribute(\"startOffset\", `${t.get()}%`)\n        }\n      })\n    }\n\n    scrollYProgress.on(\"change\", handleChange)\n\n    return () => {\n      scrollYProgress.clearListeners()\n    }\n  }, [scrollYProgress, t])\n\n  const animationProps =\n    animationType === \"auto\"\n      ? {\n          from: \"0%\",\n          to: \"100%\",\n          begin: \"0s\",\n          dur: `${duration}s`,\n          repeatCount: repeatCount,\n          ...(easingFunction && easingFunction),\n        }\n      : null\n\n  return (\n    <svg\n      className={svgClassName}\n      xmlns=\"http://www.w3.org/2000/svg\"\n      width={width}\n      height={height}\n      viewBox={viewBox}\n      preserveAspectRatio={preserveAspectRatio}\n    >\n      <path\n        id={id}\n        className={pathClassName}\n        d={path}\n        stroke={showPath ? \"currentColor\" : \"none\"}\n        fill=\"none\"\n      />\n\n      {/* First text element */}\n      <text textAnchor={textAnchor} fill=\"currentColor\">\n        <textPath\n          className={textClassName}\n          href={`#${id}`}\n          startOffset={\"0%\"}\n          ref={(ref) => {\n            if (ref) textPathRefs.current[0] = ref\n          }}\n        >\n          {animationType === \"auto\" && (\n            <animate attributeName=\"startOffset\" {...animationProps} />\n          )}\n          {text}\n        </textPath>\n      </text>\n\n      {/* Second text element (offset to hide the jump) */}\n      {animationType === \"auto\" && (\n        <text textAnchor={textAnchor} fill=\"currentColor\">\n          <textPath\n            className={textClassName}\n            href={`#${id}`}\n            startOffset={\"-100%\"}\n            ref={(ref) => {\n              if (ref) textPathRefs.current[1] = ref\n            }}\n          >\n            {animationType === \"auto\" && (\n              <animate\n                attributeName=\"startOffset\"\n                {...animationProps}\n                from=\"-100%\"\n                to=\"0%\"\n              />\n            )}\n            {text}\n          </textPath>\n        </text>\n      )}\n    </svg>\n  )\n}\n\nexport default AnimatedPathText\n",
      "type": "registry:ui",
      "target": "components/fancy/text/text-along-path.tsx"
    }
  ]
}