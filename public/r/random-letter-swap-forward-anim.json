{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "random-letter-swap-forward-anim",
  "type": "registry:ui",
  "dependencies": [
    "lodash",
    "motion"
  ],
  "author": "daniel petho <https://www.danielpetho.com>",
  "files": [
    {
      "path": "fancy/text/random-letter-swap-forward-anim.tsx",
      "content": "\"use client\"\n\nimport { useState } from \"react\"\nimport { debounce } from \"lodash\"\nimport { AnimationOptions, motion, useAnimate } from \"motion/react\"\n\ninterface TextProps {\n  label: string\n  reverse?: boolean\n  transition?: AnimationOptions\n  staggerDuration?: number\n  className?: string\n  onClick?: () => void\n}\n\nconst RandomLetterSwapForward = ({\n  label,\n  reverse = true,\n  transition = {\n    type: \"spring\",\n    duration: 0.8,\n  },\n  staggerDuration = 0.02,\n  className,\n  onClick,\n  ...props\n}: TextProps) => {\n  const [scope, animate] = useAnimate()\n  const [blocked, setBlocked] = useState(false)\n\n  const mergeTransition = (transition: AnimationOptions, i: number) => ({\n    ...transition,\n    delay: i * staggerDuration,\n  })\n\n  const shuffledIndices = Array.from(\n    { length: label.length },\n    (_, i) => i\n  ).sort(() => Math.random() - 0.5)\n\n  const hoverStart = debounce(\n    () => {\n      if (blocked) return\n      setBlocked(true)\n\n      for (let i = 0; i < label.length; i++) {\n        const randomIndex = shuffledIndices[i]\n        animate(\n          \".letter-\" + randomIndex,\n          {\n            y: reverse ? \"100%\" : \"-100%\",\n          },\n          mergeTransition(transition, i)\n        ).then(() => {\n          animate(\n            \".letter-\" + randomIndex,\n            {\n              y: 0,\n            },\n            {\n              duration: 0,\n            }\n          )\n        })\n\n        animate(\n          \".letter-secondary-\" + randomIndex,\n          {\n            top: \"0%\",\n          },\n          mergeTransition(transition, i)\n        )\n          .then(() => {\n            animate(\n              \".letter-secondary-\" + randomIndex,\n              {\n                top: reverse ? \"-100%\" : \"100%\",\n              },\n              {\n                duration: 0,\n              }\n            )\n          })\n          .then(() => {\n            if (i === label.length - 1) {\n              setBlocked(false)\n            }\n          })\n      }\n    },\n    100,\n    { leading: true, trailing: true }\n  )\n\n  return (\n    <motion.span\n      className={`flex justify-center items-center relative overflow-hidden ${className}`}\n      onHoverStart={hoverStart}\n      onClick={onClick}\n      ref={scope}\n      {...props}\n    >\n      <span className=\"sr-only\">{label}</span>\n\n      {label.split(\"\").map((letter: string, i: number) => {\n        return (\n          <span\n            className=\"whitespace-pre relative flex\"\n            key={i}\n            aria-hidden={true}\n          >\n            <motion.span\n              className={`relative pb-2 letter-${i}`}\n              style={{ top: 0 }}\n            >\n              {letter}\n            </motion.span>\n            <motion.span\n              className={`absolute letter-secondary-${i}`}\n              style={{ top: reverse ? \"-100%\" : \"100%\" }}\n            >\n              {letter}\n            </motion.span>\n          </span>\n        )\n      })}\n    </motion.span>\n  )\n}\n\nexport default RandomLetterSwapForward\n",
      "type": "registry:ui",
      "target": "components/fancy/text/random-letter-swap-forward-anim.tsx"
    }
  ]
}