{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "elastic-line",
  "type": "registry:ui",
  "dependencies": [
    "motion"
  ],
  "author": "daniel petho <https://www.danielpetho.com>",
  "registryDependencies": [
    "https://uwuui.com/r/use-dimensions.json",
    "https://uwuui.com/r/use-elastic-line-events.json"
  ],
  "files": [
    {
      "path": "fancy/physics/elastic-line.tsx",
      "content": "\"use client\"\n\nimport React, { useEffect, useRef, useState } from \"react\"\nimport {\n  animate,\n  motion,\n  useAnimationFrame,\n  useMotionValue,\n  ValueAnimationTransition,\n} from \"motion/react\"\n\nimport { useDimensions } from \"@/hooks/use-dimensions\"\nimport { useElasticLineEvents } from \"@/hooks/use-elastic-line-events\"\n\ninterface ElasticLineProps {\n  isVertical?: boolean\n  grabThreshold?: number\n  releaseThreshold?: number\n  strokeWidth?: number\n  transition?: ValueAnimationTransition\n  animateInTransition?: ValueAnimationTransition\n  className?: string\n}\n\nconst ElasticLine: React.FC<ElasticLineProps> = ({\n  isVertical = false,\n  grabThreshold = 5,\n  releaseThreshold = 100,\n  strokeWidth = 1,\n  transition = {\n    type: \"spring\",\n    stiffness: 300,\n    damping: 5,\n  },\n  animateInTransition = {\n    duration: 0.3,\n    ease: \"easeInOut\",\n  },\n  className,\n}) => {\n  const containerRef = useRef<SVGSVGElement>(null)\n  const dimensions = useDimensions(containerRef)\n  const pathRef = useRef<SVGPathElement>(null)\n  const [hasAnimatedIn, setHasAnimatedIn] = useState(false)\n\n  // Clamp releaseThreshold to container dimensions\n  const clampedReleaseThreshold = Math.min(\n    releaseThreshold,\n    isVertical ? dimensions.width / 2 : dimensions.height / 2\n  )\n\n  const { isGrabbed, controlPoint } = useElasticLineEvents(\n    containerRef,\n    isVertical,\n    grabThreshold,\n    clampedReleaseThreshold\n  )\n\n  const x = useMotionValue(dimensions.width / 2)\n  const y = useMotionValue(dimensions.height / 2)\n  const pathLength = useMotionValue(0)\n\n  useEffect(() => {\n    // Initial draw animation\n    if (!hasAnimatedIn && dimensions.width > 0 && dimensions.height > 0) {\n      animate(pathLength, 1, {\n        ...animateInTransition,\n        onComplete: () => setHasAnimatedIn(true),\n      })\n    }\n    x.set(dimensions.width / 2)\n    y.set(dimensions.height / 2)\n  }, [dimensions, hasAnimatedIn])\n\n  useEffect(() => {\n    if (!isGrabbed && hasAnimatedIn) {\n      animate(x, dimensions.width / 2, transition)\n      animate(y, dimensions.height / 2, transition)\n    }\n  }, [isGrabbed])\n\n  useAnimationFrame(() => {\n    if (isGrabbed) {\n      x.set(controlPoint.x)\n      y.set(controlPoint.y)\n    }\n\n    const controlX = hasAnimatedIn ? x.get() : dimensions.width / 2\n    const controlY = hasAnimatedIn ? y.get() : dimensions.height / 2\n\n    pathRef.current?.setAttribute(\n      \"d\",\n      isVertical\n        ? `M${dimensions.width / 2} 0Q${controlX} ${controlY} ${\n            dimensions.width / 2\n          } ${dimensions.height}`\n        : `M0 ${dimensions.height / 2}Q${controlX} ${controlY} ${\n            dimensions.width\n          } ${dimensions.height / 2}`\n    )\n  })\n\n  return (\n    <svg\n      ref={containerRef}\n      className={`w-full h-full ${className}`}\n      viewBox={`0 0 ${dimensions.width} ${dimensions.height}`}\n      preserveAspectRatio=\"none\"\n    >\n      <motion.path\n        ref={pathRef}\n        stroke=\"currentColor\"\n        strokeWidth={strokeWidth}\n        initial={{ pathLength: 0 }}\n        style={{ pathLength }}\n        fill=\"none\"\n      />\n    </svg>\n  )\n}\n\nexport default ElasticLine\n",
      "type": "registry:ui",
      "target": "components/fancy/physics/elastic-line.tsx"
    }
  ]
}