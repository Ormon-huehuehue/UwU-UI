{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "variable-font-cursor-proximity",
  "type": "registry:ui",
  "dependencies": [
    "motion"
  ],
  "author": "daniel petho <https://www.danielpetho.com>",
  "registryDependencies": [
    "https://uwuui.com/r/utils.json",
    "https://uwuui.com/r/use-mouse-position-ref.json"
  ],
  "files": [
    {
      "path": "fancy/text/variable-font-cursor-proximity.tsx",
      "content": "\"use client\"\n\nimport React, { ElementType, forwardRef, useMemo, useRef } from \"react\"\nimport { motion, useAnimationFrame } from \"motion/react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { useMousePositionRef } from \"@/hooks/use-mouse-position-ref\"\n\n/**\n * Props for the VariableFontCursorProximity component.\n */\ninterface TextProps extends React.HTMLAttributes<HTMLElement> {\n  /**\n   * The text content to display and animate.\n   * Each letter will respond individually to cursor proximity.\n   * Required prop with no default value.\n   */\n  children: React.ReactNode\n\n  /**\n   * HTML Tag to render the component as.\n   * @default \"span\"\n   */\n  as?: ElementType\n\n  /**\n   * Default font variation settings applied when cursor is outside the radius.\n   * Should be a CSS font-variation-settings string (e.g., \"'wght' 400, 'slnt' 0\").\n   * You should check the font variation settings of the font you are using to see the available axes.\n   * Required prop with no default value.\n   */\n  fromFontVariationSettings: string\n\n  /**\n   * Target font variation settings applied when cursor is at the center of a letter.\n   * Should be a CSS font-variation-settings string (e.g., \"'wght' 900, 'slnt' 15\").\n   * Make sure to check the font variation settings of the font you are using to see the available axes.\n   * Required prop with no default value.\n   */\n  toFontVariationSettings: string\n\n  /**\n   * Reference to the container element for mouse tracking.\n   * The cursor position will be calculated relative to this container's bounds.\n   * Required prop with no default value.\n   */\n  containerRef: React.RefObject<HTMLDivElement>\n\n  /**\n   * The radius in pixels within which letters respond to cursor proximity.\n   * Letters outside this radius will use the default font variation settings.\n   * @default 50\n   */\n  radius?: number\n\n  /**\n   * The falloff function that determines how the effect diminishes with distance.\n   * - \"linear\": Linear interpolation (straight line falloff)\n   * - \"exponential\": Quadratic falloff (more dramatic near cursor)\n   * - \"gaussian\": Bell curve falloff (smooth, natural feeling)\n   * @default \"linear\"\n   */\n  falloff?: \"linear\" | \"exponential\" | \"gaussian\"\n}\n\nconst VariableFontCursorProximity = forwardRef<HTMLElement, TextProps>(\n  (\n    {\n      children,\n      as = \"span\",\n      fromFontVariationSettings,\n      toFontVariationSettings,\n      containerRef,\n      radius = 50,\n      falloff = \"linear\",\n      className,\n      ...props\n    },\n    ref\n  ) => {\n    // Refs to store references to each individual letter element\n    const letterRefs = useRef<(HTMLSpanElement | null)[]>([])\n\n    // Cache for interpolated font settings to avoid recalculation\n    const interpolatedSettingsRef = useRef<string[]>([])\n\n    // Hook to track mouse position relative to the specified container\n    const mousePositionRef = useMousePositionRef(containerRef)\n\n    /**\n     * Parse and prepare font variation settings for interpolation.\n     *\n     * Converts CSS font-variation-settings strings into structured data that can be\n     * efficiently interpolated. Each axis is parsed with its from/to values for\n     * smooth transitions during proximity-based animation.\n     *\n     * Expected format: \"'wght' 400, 'slnt' 0\" -> Map of axis names to values\n     */\n    const parsedSettings = useMemo(() => {\n      // Parse the 'from' font variation settings string\n      const fromSettings = new Map(\n        fromFontVariationSettings\n          .split(\",\")\n          .map((s) => s.trim())\n          .map((s) => {\n            const [name, value] = s.split(\" \")\n            return [name.replace(/['\"]/g, \"\"), parseFloat(value)]\n          })\n      )\n\n      // Parse the 'to' font variation settings string\n      const toSettings = new Map(\n        toFontVariationSettings\n          .split(\",\")\n          .map((s) => s.trim())\n          .map((s) => {\n            const [name, value] = s.split(\" \")\n            return [name.replace(/['\"]/g, \"\"), parseFloat(value)]\n          })\n      )\n\n      // Create structured data for each axis with from/to values\n      return Array.from(fromSettings.entries()).map(([axis, fromValue]) => ({\n        axis,\n        fromValue,\n        toValue: toSettings.get(axis) ?? fromValue,\n      }))\n    }, [fromFontVariationSettings, toFontVariationSettings])\n\n    /**\n     * Calculate Euclidean distance between two points.\n     *\n     * Used to determine the distance between the cursor position and each letter's center.\n     * This distance is then used to calculate the proximity effect strength.\n     *\n     * @param x1 - X coordinate of first point (cursor)\n     * @param y1 - Y coordinate of first point (cursor)\n     * @param x2 - X coordinate of second point (letter center)\n     * @param y2 - Y coordinate of second point (letter center)\n     * @returns Distance in pixels between the two points\n     */\n    const calculateDistance = (\n      x1: number,\n      y1: number,\n      x2: number,\n      y2: number\n    ): number => {\n      return Math.sqrt(Math.pow(x2 - x1, 2) + Math.pow(y2 - y1, 2))\n    }\n\n    /**\n     * Calculate the falloff value based on distance and selected falloff type.\n     *\n     * This function determines how strongly the proximity effect affects each letter\n     * based on its distance from the cursor. Different falloff types create different\n     * visual effects and feelings of interaction.\n     *\n     * @param distance - Distance in pixels from cursor to letter center\n     * @returns Falloff value between 0 (no effect) and 1 (full effect)\n     */\n    const calculateFalloff = (distance: number): number => {\n      // Normalize distance to 0-1 range within the radius\n      const normalizedDistance = Math.min(Math.max(1 - distance / radius, 0), 1)\n\n      switch (falloff) {\n        case \"exponential\":\n          // Quadratic falloff - more dramatic effect near cursor\n          return Math.pow(normalizedDistance, 2)\n        case \"gaussian\":\n          // Bell curve falloff - smooth, natural feeling\n          return Math.exp(-Math.pow(distance / (radius / 2), 2) / 2)\n        case \"linear\":\n        default:\n          // Linear falloff - consistent rate of change\n          return normalizedDistance\n      }\n    }\n\n    // Use animation frame to smoothly update font variations for all letters\n    // This ensures smooth transitions as the cursor moves across the text\n    useAnimationFrame(() => {\n      if (!containerRef.current) return\n      const containerRect = containerRef.current.getBoundingClientRect()\n\n      // Process each letter individually for proximity-based animation\n      letterRefs.current.forEach((letterRef, index) => {\n        if (!letterRef) return\n\n        // Calculate letter's center position relative to container\n        const rect = letterRef.getBoundingClientRect()\n        const letterCenterX = rect.left + rect.width / 2 - containerRect.left\n        const letterCenterY = rect.top + rect.height / 2 - containerRect.top\n\n        // Calculate distance from cursor to this letter's center\n        const distance = calculateDistance(\n          mousePositionRef.current.x,\n          mousePositionRef.current.y,\n          letterCenterX,\n          letterCenterY\n        )\n\n        // If letter is outside the effect radius, reset to default settings\n        if (distance >= radius) {\n          if (\n            letterRef.style.fontVariationSettings !== fromFontVariationSettings\n          ) {\n            letterRef.style.fontVariationSettings = fromFontVariationSettings\n          }\n          return\n        }\n\n        // Calculate falloff strength based on distance and falloff type\n        const falloffValue = calculateFalloff(distance)\n\n        // Interpolate between from and to settings for each axis\n        const newSettings = parsedSettings\n          .map(({ axis, fromValue, toValue }) => {\n            const interpolatedValue =\n              fromValue + (toValue - fromValue) * falloffValue\n            return `'${axis}' ${interpolatedValue}`\n          })\n          .join(\", \")\n\n        // Cache and apply the interpolated settings\n        interpolatedSettingsRef.current[index] = newSettings\n        letterRef.style.fontVariationSettings = newSettings\n      })\n    })\n\n    // Split text into words and track letter indices across all words\n    const words = String(children).split(\" \")\n    let letterIndex = 0\n    const ElementTag = as\n\n    return (\n      <ElementTag\n        ref={ref}\n        className={cn(\n          className,\n        )}\n        {...props}\n        data-text={children}\n      >\n        {words.map((word, wordIndex) => (\n          <span\n            key={wordIndex}\n            className=\"inline-block whitespace-nowrap\"\n            aria-hidden\n          >\n            {word.split(\"\").map((letter) => {\n              const currentLetterIndex = letterIndex++\n              return (\n                <motion.span\n                  key={currentLetterIndex}\n                  ref={(el: HTMLSpanElement | null) => {\n                    letterRefs.current[currentLetterIndex] = el\n                  }}\n                  className=\"inline-block\"\n                  aria-hidden=\"true\"\n                  style={{\n                    fontVariationSettings:\n                      interpolatedSettingsRef.current[currentLetterIndex],\n                  }}\n                >\n                  {letter}\n                </motion.span>\n              )\n            })}\n            {wordIndex < words.length - 1 && (\n              <span className=\"inline-block\">&nbsp;</span>\n            )}\n          </span>\n        ))}\n        <span className=\"sr-only\">{children}</span>\n      </ElementTag>\n    )\n  }\n)\n\nVariableFontCursorProximity.displayName = \"VariableFontCursorProximity\"\nexport default VariableFontCursorProximity\n",
      "type": "registry:ui",
      "target": "components/fancy/text/variable-font-cursor-proximity.tsx"
    }
  ]
}