{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "typewriter",
  "type": "registry:ui",
  "dependencies": [
    "motion"
  ],
  "author": "daniel petho <https://www.danielpetho.com>",
  "registryDependencies": [
    "https://uwuui.com/r/utils.json"
  ],
  "files": [
    {
      "path": "fancy/text/typewriter.tsx",
      "content": "\"use client\"\n\nimport { ElementType, useEffect, useState } from \"react\"\nimport { motion, Variants } from \"motion/react\"\n\nimport { cn } from \"@/lib/utils\"\n\ninterface TypewriterProps {\n  /**\n   * Text or array of texts to type out\n   */\n  text: string | string[]\n\n  /**\n   * HTML Tag to render the component as\n   * @default div\n   */\n  as?: ElementType\n\n  /**\n   * Speed of typing in milliseconds\n   * @default 50\n   */\n  speed?: number\n\n  /**\n   * Initial delay before typing starts\n   * @default 0\n   */\n  initialDelay?: number\n\n  /**\n   * Time to wait between typing and deleting\n   * @default 2000\n   */\n  waitTime?: number\n\n  /**\n   * Speed of deleting characters\n   * @default 30\n   */\n  deleteSpeed?: number\n\n  /**\n   * Whether to loop through texts array\n   * @default true\n   */\n  loop?: boolean\n\n  /**\n   * Optional class name for styling\n   */\n  className?: string\n\n  /**\n   * Whether to show the cursor\n   * @default true\n   */\n  showCursor?: boolean\n\n  /**\n   * Hide cursor while typing\n   * @default false\n   */\n  hideCursorOnType?: boolean\n\n  /**\n   * Character or React node to use as cursor\n   * @default \"|\"\n   */\n  cursorChar?: string | React.ReactNode\n\n  /**\n   * Animation variants for cursor\n   */\n  cursorAnimationVariants?: {\n    initial: Variants[\"initial\"]\n    animate: Variants[\"animate\"]\n  }\n\n  /**\n   * Optional class name for cursor styling\n   */\n  cursorClassName?: string\n}\n\nconst Typewriter = ({\n  text,\n  as: Tag = \"div\",\n  speed = 50,\n  initialDelay = 0,\n  waitTime = 2000,\n  deleteSpeed = 30,\n  loop = true,\n  className,\n  showCursor = true,\n  hideCursorOnType = false,\n  cursorChar = \"|\",\n  cursorClassName = \"ml-1\",\n  cursorAnimationVariants = {\n    initial: { opacity: 0 },\n    animate: {\n      opacity: 1,\n      transition: {\n        duration: 0.01,\n        repeat: Infinity,\n        repeatDelay: 0.4,\n        repeatType: \"reverse\",\n      },\n    },\n  },\n  ...props\n}: TypewriterProps & React.HTMLAttributes<HTMLElement>) => {\n  const [displayText, setDisplayText] = useState(\"\")\n  const [currentIndex, setCurrentIndex] = useState(0)\n  const [isDeleting, setIsDeleting] = useState(false)\n  const [currentTextIndex, setCurrentTextIndex] = useState(0)\n\n  const texts = Array.isArray(text) ? text : [text]\n\n  useEffect(() => {\n    let timeout: NodeJS.Timeout\n\n    const currentText = texts[currentTextIndex]\n\n    const startTyping = () => {\n      if (isDeleting) {\n        if (displayText === \"\") {\n          setIsDeleting(false)\n          if (currentTextIndex === texts.length - 1 && !loop) {\n            return\n          }\n          setCurrentTextIndex((prev) => (prev + 1) % texts.length)\n          setCurrentIndex(0)\n          timeout = setTimeout(() => {}, waitTime)\n        } else {\n          timeout = setTimeout(() => {\n            setDisplayText((prev) => prev.slice(0, -1))\n          }, deleteSpeed)\n        }\n      } else {\n        if (currentIndex < currentText.length) {\n          timeout = setTimeout(() => {\n            setDisplayText((prev) => prev + currentText[currentIndex])\n            setCurrentIndex((prev) => prev + 1)\n          }, speed)\n        } else if (texts.length > 1) {\n          timeout = setTimeout(() => {\n            setIsDeleting(true)\n          }, waitTime)\n        }\n      }\n    }\n\n    // Apply initial delay only at the start\n    if (currentIndex === 0 && !isDeleting && displayText === \"\") {\n      timeout = setTimeout(startTyping, initialDelay)\n    } else {\n      startTyping()\n    }\n\n    return () => clearTimeout(timeout)\n  }, [\n    currentIndex,\n    displayText,\n    isDeleting,\n    speed,\n    deleteSpeed,\n    waitTime,\n    texts,\n    currentTextIndex,\n    loop,\n  ])\n\n  return (\n    <Tag className={cn(\"inline whitespace-pre-wrap tracking-tight\", className)} {...props}>\n      <span>{displayText}</span>\n      {showCursor && (\n        <motion.span\n          variants={cursorAnimationVariants}\n          className={cn(\n            cursorClassName,\n            hideCursorOnType &&\n              (currentIndex < texts[currentTextIndex].length || isDeleting)\n              ? \"hidden\"\n              : \"\"\n          )}\n          initial=\"initial\"\n          animate=\"animate\"\n        >\n          {cursorChar}\n        </motion.span>\n      )}\n    </Tag>\n  )\n}\n\nexport default Typewriter\n",
      "type": "registry:ui",
      "target": "components/fancy/text/typewriter.tsx"
    }
  ]
}