{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "text-highlighter",
  "type": "registry:ui",
  "dependencies": [
    "motion"
  ],
  "author": "daniel petho <https://www.danielpetho.com>",
  "registryDependencies": [
    "https://uwuui.com/r/utils.json"
  ],
  "files": [
    {
      "path": "fancy/text/text-highlighter.tsx",
      "content": "\"use client\"\n\nimport {\n  ElementType,\n  forwardRef,\n  useEffect,\n  useImperativeHandle,\n  useMemo,\n  useRef,\n  useState,\n} from \"react\"\nimport { motion, Transition, useInView, UseInViewOptions } from \"motion/react\"\n\nimport { cn } from \"@/lib/utils\"\n\ntype HighlightDirection = \"ltr\" | \"rtl\" | \"ttb\" | \"btt\"\n\ntype TextHighlighterProps = {\n  /**\n   * The text content to be highlighted\n   */\n  children: React.ReactNode\n\n  /**\n   * HTML element to render as\n   * @default \"p\"\n   */\n  as?: ElementType\n\n  /**\n   * How to trigger the animation\n   * @default \"inView\"\n   */\n  triggerType?: \"hover\" | \"ref\" | \"inView\" | \"auto\"\n\n  /**\n   * Animation transition configuration\n   * @default { duration: 0.4, type: \"spring\", bounce: 0 }\n   */\n  transition?: Transition\n\n  /**\n   * Options for useInView hook when triggerType is \"inView\"\n   */\n  useInViewOptions?: UseInViewOptions\n\n  /**\n   * Class name for the container element\n   */\n  className?: string\n\n  /**\n   * Highlight color (CSS color string). Also can be a function that returns a color string, eg:\n   * @default 'hsl(60, 90%, 68%)' (yellow)\n   */\n  highlightColor?: string\n\n  /**\n   * Direction of the highlight animation\n   * @default \"ltr\" (left to right)\n   */\n  direction?: HighlightDirection\n} & React.HTMLAttributes<HTMLElement>\n\nexport type TextHighlighterRef = {\n  /**\n   * Trigger the highlight animation\n   * @param direction - Optional direction override for this animation\n   */\n  animate: (direction?: HighlightDirection) => void\n\n  /**\n   * Reset the highlight animation\n   */\n  reset: () => void\n}\n\nexport const TextHighlighter = forwardRef<\n  TextHighlighterRef,\n  TextHighlighterProps\n>(\n  (\n    {\n      children,\n      as = \"span\",\n      triggerType = \"inView\",\n      transition = { type: \"spring\", duration: 1, delay: 0, bounce: 0 },\n      useInViewOptions = {\n        once: true,\n        initial: false,\n        amount: 0.1,\n      },\n      className,\n      highlightColor = \"hsl(25, 90%, 80%)\",\n      direction = \"ltr\",\n      ...props\n    },\n    ref\n  ) => {\n    const componentRef = useRef<HTMLDivElement>(null)\n    const [isAnimating, setIsAnimating] = useState(false)\n    const [isHovered, setIsHovered] = useState(false)\n    const [currentDirection, setCurrentDirection] =\n      useState<HighlightDirection>(direction)\n\n    // this allows us to change the direction whenever the direction prop changes\n    useEffect(() => {\n      setCurrentDirection(direction)\n    }, [direction])\n\n    const isInView =\n      triggerType === \"inView\"\n        ? useInView(componentRef, useInViewOptions)\n        : false\n\n    useImperativeHandle(ref, () => ({\n      animate: (animationDirection?: HighlightDirection) => {\n        if (animationDirection) {\n          setCurrentDirection(animationDirection)\n        }\n        setIsAnimating(true)\n      },\n      reset: () => setIsAnimating(false),\n    }))\n\n    const shouldAnimate =\n      triggerType === \"hover\"\n        ? isHovered\n        : triggerType === \"inView\"\n          ? isInView\n          : triggerType === \"ref\"\n            ? isAnimating\n            : triggerType === \"auto\"\n              ? true\n              : false\n\n    const ElementTag = as || \"span\"\n\n    // Get background size based on direction\n    const getBackgroundSize = (animated: boolean) => {\n      switch (currentDirection) {\n        case \"ltr\":\n          return animated ? \"100% 100%\" : \"0% 100%\"\n        case \"rtl\":\n          return animated ? \"100% 100%\" : \"0% 100%\"\n        case \"ttb\":\n          return animated ? \"100% 100%\" : \"100% 0%\"\n        case \"btt\":\n          return animated ? \"100% 100%\" : \"100% 0%\"\n        default:\n          return animated ? \"100% 100%\" : \"0% 100%\"\n      }\n    }\n\n    // Get background position based on direction\n    const getBackgroundPosition = () => {\n      switch (currentDirection) {\n        case \"ltr\":\n          return \"0% 0%\"\n        case \"rtl\":\n          return \"100% 0%\"\n        case \"ttb\":\n          return \"0% 0%\"\n        case \"btt\":\n          return \"0% 100%\"\n        default:\n          return \"0% 0%\"\n      }\n    }\n\n    const animatedSize = useMemo(() => getBackgroundSize(shouldAnimate), [shouldAnimate, currentDirection])\n    const initialSize = useMemo(() => getBackgroundSize(false), [currentDirection])\n    const backgroundPosition = useMemo(() => getBackgroundPosition(), [currentDirection])\n\n    const highlightStyle = {\n      backgroundImage: `linear-gradient(${highlightColor}, ${highlightColor})`,\n      backgroundRepeat: \"no-repeat\",\n      backgroundPosition: backgroundPosition,\n      backgroundSize: animatedSize,\n      boxDecorationBreak: \"clone\",\n      WebkitBoxDecorationBreak: \"clone\",\n    } as React.CSSProperties\n\n    return (\n      <ElementTag\n        ref={componentRef}\n        onMouseEnter={() => triggerType === \"hover\" && setIsHovered(true)}\n        onMouseLeave={() => triggerType === \"hover\" && setIsHovered(false)}\n        {...props}\n      >\n        <motion.span\n          className={cn(\"inline\", className)}\n          style={highlightStyle}\n          animate={{\n            backgroundSize: animatedSize,\n          }}\n          initial={{\n            backgroundSize: initialSize,\n          }}\n          transition={transition}\n        >\n          {children}\n        </motion.span>\n      </ElementTag>\n    )\n  }\n)\n\nTextHighlighter.displayName = \"TextHighlighter\"\n\nexport default TextHighlighter\n",
      "type": "registry:ui",
      "target": "components/fancy/text/text-highlighter.tsx"
    }
  ]
}