{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "copy-page-menu",
  "type": "registry:ui",
  "dependencies": [
    "lucide-react",
    "motion"
  ],
  "author": "daniel petho <https://www.danielpetho.com>",
  "registryDependencies": [
    "button",
    "https://uwuui.com/r/icons.json"
  ],
  "files": [
    {
      "path": "components/copy-page-menu.tsx",
      "content": "\"use client\"\n\nimport React, { useState } from \"react\"\nimport { Copy, FileText, MoreHorizontal, Check, ChevronDown, CopyIcon } from \"lucide-react\"\nimport { Button } from \"@/components/ui/button\"\nimport {\n  DropdownMenu,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuSeparator,\n  DropdownMenuTrigger,\n} from \"@/components/ui/dropdown-menu\"\nimport { Icons } from \"@/components/icons\"\nimport { motion, Variants } from 'motion/react'\n\ninterface CopyPageMenuProps {\n  title: string\n  content: string // The main content to copy\n  currentUrl: string // Current page URL for markdown link generation\n}\n\nconst copyIconVariants: Variants = {\n  idle: { \n    opacity: 1,\n    scale: 1,\n    transition: { duration: 0.2, ease: \"easeOut\" }\n  },\n  copying: { \n    opacity: 0,\n    scale: 0.8,\n    transition: { duration: 0.2, ease: \"easeOut\" }\n  },\n  copied: { \n    opacity: 0,\n    scale: 0.8,\n    transition: { duration: 0.2, ease: \"easeOut\" }\n  }\n}\n\nconst checkIconVariants: Variants = {\n  idle: {\n    opacity: 0,\n    scale: 0.8,\n    transition: { duration: 0.2, ease: \"easeOut\" }\n  },\n  copying: {\n    opacity: 0,\n    scale: 0.8,\n    transition: { duration: 0.2, ease: \"easeOut\" }\n  },\n  copied: {\n    opacity: 1,\n    scale: 1,\n    transition: { duration: 0.2, ease: \"easeOut\" }\n  }\n}\n\nconst checkPathVariants: Variants = {\n  idle: { \n    pathLength: 0,\n    opacity: 0,\n    transition: { duration: 0.2, ease: \"easeOut\" }\n  },\n  copying: { \n    pathLength: 0,\n    opacity: 1,\n    transition: { duration: 0.2, ease: \"easeOut\" }\n  },\n  copied: { \n    pathLength: 1,\n    opacity: 1,\n    transition: { duration: 0.3, ease: \"easeOut\" }\n  }\n}\n\nexport function CopyPageMenu({ title, content, currentUrl }: CopyPageMenuProps) {\n  const [status, setStatus] = useState<\"idle\" | \"copying\" | \"copied\">(\"idle\")\n\n  const copyToClipboard = async (text: string) => {\n    try {\n      await navigator.clipboard.writeText(text)\n    } catch (error) {\n      console.error(\"Failed to copy to clipboard:\", error)\n      throw error\n    }\n  }\n\n  const handleCopyAsMarkdown = async () => {\n    if (status !== \"idle\") return\n    \n    setStatus(\"copying\")\n    \n    try {\n      // Create markdown content optimized for LLMs\n      const markdownContent = `# ${title}\\n\\n${content}\\n\\n---\\n\\nSource: ${currentUrl}`\n      await copyToClipboard(markdownContent)\n      \n      setTimeout(() => {\n        setStatus(\"copied\")\n      }, 100)\n      \n      setTimeout(() => {\n        setStatus(\"idle\")\n      }, 2000)\n    } catch (error) {\n      setStatus(\"idle\")\n    }\n  }\n\n  const handleViewAsMarkdown = () => {\n    const markdownUrl = `${currentUrl}.md`\n    window.open(markdownUrl, \"_blank\")\n  }\n\n  const handleOpenInChatGPT = () => {\n    const prompt = `Please help me understand this documentation: ${currentUrl}.md`\n    const chatGPTUrl = `https://chat.openai.com/?model=gpt-4&q=${encodeURIComponent(prompt)}`\n    window.open(chatGPTUrl, \"_blank\")\n  }\n\n  const handleOpenInClaude = () => {\n    const prompt = `Please help me understand this documentation: ${currentUrl}.md`\n    const claudeUrl = `https://claude.ai/new?q=${encodeURIComponent(prompt)}`\n    window.open(claudeUrl, \"_blank\")\n  }\n\n  return (\n    <DropdownMenu>\n      <DropdownMenuTrigger asChild>\n        <motion.button\n          className=\"inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-lg text-sm cursor-pointer font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0 border border-input bg-background hover:bg-accent hover:text-accent-foreground h-8 w-8\"\n          //whileTap={{ scale: 0.9 }}\n          transition={{ type: \"spring\", stiffness: 400, damping: 30 }}\n        >\n          <div className=\"relative w-4 h-4\">\n            {/* Copy Icon */}\n            <motion.div\n              className=\"absolute inset-0 flex items-center justify-center\"\n              animate={status}\n              variants={copyIconVariants}\n            >\n              <CopyIcon className=\"w-4 h-4\" />\n            </motion.div>\n            \n            {/* Check Icon */}\n            <motion.div\n              className=\"absolute inset-0 flex items-center justify-center\"\n              animate={status}\n              variants={checkIconVariants}\n            >\n              <svg\n                xmlns=\"http://www.w3.org/2000/svg\"\n                width={16}\n                height={16}\n                viewBox=\"0 0 24 24\"\n                fill=\"none\"\n                stroke=\"currentColor\"\n                strokeWidth=\"2\"\n                strokeLinecap=\"round\"\n                strokeLinejoin=\"round\"\n              >\n                <motion.path\n                  d=\"M4 12 9 17L20 6\"\n                  animate={status}\n                  variants={checkPathVariants}\n                />\n              </svg>\n            </motion.div>\n          </div>\n        </motion.button>\n      </DropdownMenuTrigger>\n      <DropdownMenuContent align=\"end\">\n        <DropdownMenuItem>\n          <Button\n            variant=\"ghost\"\n            className=\"justify-start text-left px-0 h-6 gap-2 flex w-full border-none\"\n            onClick={handleCopyAsMarkdown}\n          >\n            {status === \"copied\" ? (\n              <Check className=\"h-4 w-4\" />\n            ) : (\n              <Copy className=\"h-4 w-4\" />\n            )}\n            Copy page as Markdown for LLMs\n          </Button>\n        </DropdownMenuItem>\n\n        <DropdownMenuItem>\n          <Button\n            variant=\"ghost\"\n            className=\"justify-start text-left px-0 h-6 gap-2 flex w-full border-none\"\n            onClick={handleViewAsMarkdown}\n          >\n            <FileText className=\"h-4 w-4\" />\n            View as Markdown\n          </Button>\n        </DropdownMenuItem>\n\n        <DropdownMenuItem>\n          <Button\n            variant=\"ghost\"\n            className=\"justify-start text-left px-0 h-6 gap-2 flex w-full border-none\"\n            onClick={handleOpenInChatGPT}\n          >\n            <Icons.openai className=\"h-4 w-4\" />\n            Open in ChatGPT\n          </Button>\n        </DropdownMenuItem>\n\n        <DropdownMenuItem>\n          <Button\n            variant=\"ghost\"\n            className=\"justify-start text-left px-0 h-6 gap-2 flex w-full border-none\"\n            onClick={handleOpenInClaude}\n          >\n            <Icons.anthropic className=\"h-4 w-4\" />\n            Open in Claude\n          </Button>\n        </DropdownMenuItem>\n      </DropdownMenuContent>\n    </DropdownMenu>\n  )\n} ",
      "type": "registry:ui",
      "target": "components/fancy/components/copy-page-menu.tsx"
    }
  ]
}