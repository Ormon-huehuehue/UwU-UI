{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "install-tabs",
  "type": "registry:ui",
  "dependencies": [
    "prism-react-renderer"
  ],
  "author": "daniel petho <https://www.danielpetho.com>",
  "registryDependencies": [
    "tabs",
    "https://uwuui.com/r/copy-button.json"
  ],
  "files": [
    {
      "path": "components/install-tabs.tsx",
      "content": "\"use client\"\n\nimport React, { useState } from \"react\"\nimport { Highlight, PrismTheme } from \"prism-react-renderer\"\n\nimport { Tabs, TabsList, TabsTrigger } from \"@/components/ui/tabs\"\nimport theme from \"@/styles/prism-theme.json\"\n\nimport { CopyButton } from \"./copy-button\"\n\ninterface InstallTabsProps {\n  command: string\n  npx?: boolean\n}\n\ntype PackageManager = \"pnpm\" | \"npm\" | \"yarn\" | \"bun\"\n\nconst packageManagers: Array<{ id: PackageManager; label: string }> = [\n  { id: \"pnpm\", label: \"pnpm\" },\n  { id: \"npm\", label: \"npm\" },\n  { id: \"yarn\", label: \"yarn\" },\n  { id: \"bun\", label: \"bun\" },\n]\n\nexport const InstallTabs: React.FC<InstallTabsProps> = ({\n  command,\n  npx = false,\n}) => {\n  const [activeTab, setActiveTab] = useState<PackageManager>(\"pnpm\")\n\n  const getCommandPrefix = (pm: PackageManager): string => {\n    if (npx) {\n      switch (pm) {\n        case \"pnpm\":\n          return \"pnpm dlx\"\n        case \"npm\":\n          return \"npx\"\n        case \"yarn\":\n          return \"npx\"\n        case \"bun\":\n          return \"bunx --bun\"\n        default:\n          return \"npx\"\n      }\n    } else {\n      switch (pm) {\n        case \"pnpm\":\n          return \"pnpm add\"\n        case \"npm\":\n          return \"npm install\"\n        case \"yarn\":\n          return \"yarn add\"\n        case \"bun\":\n          return \"bun add\"\n        default:\n          return \"npm install\"\n      }\n    }\n  }\n\n  const getFullCommand = (pm: PackageManager): string => {\n    const prefix = getCommandPrefix(pm)\n    return `${prefix} ${command}`\n  }\n\n  const handleCopy = async () => {\n    const fullCommand = getFullCommand(activeTab)\n    try {\n      await navigator.clipboard.writeText(fullCommand)\n    } catch (err) {\n      console.warn(\"Copy failed:\", err)\n    }\n  }\n\n  return (\n    <div className=\"border rounded-2xl overflow-hidden\" style={{ borderColor: 'var(--editor-border)' }}>\n      <div className=\"flex items-center justify-between pl-4 pr-3 py-2 border-b h-11\" style={{ borderColor: 'var(--editor-border)', backgroundColor: 'var(--editor-bg)' }}>\n        <Tabs\n          value={activeTab}\n          onValueChange={(value) => setActiveTab(value as PackageManager)}\n          className=\"flex-1\"\n        >\n          <TabsList className=\"bg-transparent h-auto p-0\">\n            {packageManagers.map((pm) => (\n              <TabsTrigger\n                key={pm.id}\n                value={pm.id}\n                className=\"text hover:text-white duration-300 ease-out transition px-2 py-1 h-auto data-[state=active]:text-white text-muted-foreground cursor-pointer\"\n                style={{ \n                  backgroundColor: activeTab === pm.id ? 'var(--editor-bg)' : 'transparent'\n                }}\n                aria-label={pm.label}\n              >\n                {pm.label}\n              </TabsTrigger>\n            ))}\n          </TabsList>\n        </Tabs>\n        <CopyButton onCopy={handleCopy} />\n      </div>\n      <div className=\"py-4\" style={{ backgroundColor: 'var(--editor-bg)' }}>\n        <Highlight\n          theme={theme as PrismTheme}\n          code={getFullCommand(activeTab)}\n          language=\"js\"\n        >\n          {({ className, style, tokens, getLineProps, getTokenProps }) => (\n            <pre\n              className={`${className} text-[13px] overflow-x-auto font-mono font-medium`}\n              style={style}\n            >\n              {tokens.map((line, i) => (\n                <div\n                  key={i}\n                  {...getLineProps({ line })}\n                  className=\"flex items-center py-px px-4\"\n                  style={{ \n                    backgroundColor: 'transparent'\n                  }}\n                  onMouseEnter={(e) => {\n                    e.currentTarget.style.backgroundColor = 'var(--editor-border)'\n                  }}\n                  onMouseLeave={(e) => {\n                    e.currentTarget.style.backgroundColor = 'transparent'\n                  }}\n                >\n                  <span className=\"mr-4 select-none text-muted-foreground text-right text-[10px] items-center flex\">\n                    1\n                  </span>\n                  <span>\n                    {line.map((token, key) => (\n                      <span key={key} {...getTokenProps({ token })} />\n                    ))}\n                  </span>\n                </div>\n              ))}\n            </pre>\n          )}\n        </Highlight>\n      </div>\n    </div>\n  )\n}\n",
      "type": "registry:ui",
      "target": "components/fancy/components/install-tabs.tsx"
    }
  ]
}