{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "component-preview",
  "type": "registry:ui",
  "dependencies": [],
  "author": "daniel petho <https://www.danielpetho.com>",
  "registryDependencies": [
    "https://uwuui.com/r/utils.json",
    "tabs",
    "https://uwuui.com/r/icons.json",
    "https://uwuui.com/r/code-snippet.json",
    "https://uwuui.com/r/restart-button.json"
  ],
  "files": [
    {
      "path": "components/component-preview.tsx",
      "content": "\"use client\"\n\nimport * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\"\nimport { Icons } from \"@/components/icons\"\nimport { customRegistry } from \"@/fancy/custom-registry\"\n\nimport { CodeSnippet } from \"./code-snippet\"\nimport { RestartButton } from \"./restart-button\"\n\ninterface ComponentPreviewProps extends React.HTMLAttributes<HTMLDivElement> {\n  name: string\n  extractClassname?: boolean\n  extractedClassNames?: string\n  align?: \"center\" | \"start\" | \"end\"\n  framerLink?: string\n  description?: string\n}\n\nexport function ComponentPreview({\n  name,\n  children,\n  className,\n  framerLink,\n  extractClassname,\n  extractedClassNames,\n  align = \"center\",\n  description,\n  ...props\n}: ComponentPreviewProps) {\n  const [sourceCode, setSourceCode] = React.useState(\"\")\n  const [previewKey, setPreviewKey] = React.useState(0)\n  const [showRestartButton, setShowRestartButton] = React.useState(true)\n\n  React.useEffect(() => {\n    async function loadSourceCode() {\n      try {\n        // Try to load from registry first\n        try {\n          const registryResponse = await fetch(`/r/${encodeURIComponent(name)}.json`)\n          if (registryResponse.ok) {\n            const registry = await registryResponse.json()\n            const files: Array<{ path: string; content: string }> = registry.files || []\n            const mainFile = files.find((f) => {\n              const base = f.path.split(\"/\").pop() || \"\"\n              const fileNameWithoutExt = base.replace(/\\.(tsx|ts)$/i, \"\")\n              // More flexible matching - check if the name matches after normalizing case and hyphens\n              const normalizedFileName = fileNameWithoutExt.toLowerCase().replace(/[-_]/g, '')\n              const normalizedName = name.toLowerCase().replace(/[-_]/g, '')\n              return normalizedFileName === normalizedName\n            })\n            if (mainFile?.content) {\n              setSourceCode(mainFile.content)\n              return\n            } else if (files.length > 0 && files[0].content) {\n              // Fallback to first file if no match found\n              setSourceCode(files[0].content)\n              return\n            }\n          }\n        } catch (registryError) {\n          console.error(`Registry fetch failed for ${name}:`, registryError)\n        }\n\n        console.error(`Could not resolve source for ${name} - registry file not found or empty`)\n        setSourceCode(\"// Source code could not be loaded - registry file not found\")\n      } catch (error) {\n        console.error(`Failed to load source for ${name}:`, error);\n        setSourceCode(\"// Error loading source code\");\n      }\n    }\n    loadSourceCode();\n  }, [name])\n\n  const handleRestart = React.useCallback(() => {\n    setPreviewKey((prev) => prev + 1)\n  }, [])\n\n  React.useEffect(() => {\n    const handleKeyDown = (event: KeyboardEvent) => {\n      if (event.key === \"r\" || event.key === \"R\") {\n        handleRestart()\n      }\n      // Toggle restart button visibility with Cmd+D\n      if ((event.metaKey || event.ctrlKey) && event.key === \"1\") {\n        event.preventDefault()\n        setShowRestartButton((prev) => !prev)\n      }\n    }\n\n    window.addEventListener(\"keydown\", handleKeyDown)\n    return () => window.removeEventListener(\"keydown\", handleKeyDown)\n  }, [handleRestart])\n\n  const Preview = React.useMemo(() => {\n    const entry = (customRegistry as Record<string, { component: React.ComponentType<any> }>) [name]\n    const Component = entry?.component\n\n    if (!Component) {\n      return (\n        <p\n          data-algolia-ignore\n          className=\"text text-muted-foreground justify-center items-center flex w-full h-full whitespace-pre\"\n        >\n          Component{\" \"}\n          <code className=\"relative rounded bg-muted px-[0.3rem] py-[0.2rem] font-mono text-sm whitespace-pre\">\n            {name}\n          </code>{\" \"}\n          not found.\n        </p>\n      )\n    }\n\n    // Render the component with default props\n    return (\n      <div className=\"flex items-center justify-center p-10\">\n        <Component />\n      </div>\n    )\n  }, [name])\n\n  return (\n    <div\n      data-algolia-ignore\n      className={cn(\n        \"group relative flex flex-col h-full w-full \",\n        className\n      )}\n      {...props}\n    >\n      <Tabs defaultValue=\"preview\" className=\"relative mr-auto w-full\">\n        <div className=\"flex items-center justify-between\">\n          <TabsList className=\"w-full justify-start rounded-none p-0 h-9 bg-transparent space-x-3 px-3\">\n            <TabsTrigger\n              value=\"preview\"\n              className=\"relative text-base rounded-none border-b-transparent bg-transparent px-0 font-semibold text-muted-foreground shadow-none transition-colors duration-300 ease-out hover:text-foreground data-[state=active]:font-semibold data-[state=active]:text-foreground data-[state=active]:shadow-none data-[state=active]:bg-transparent\"\n            >\n              Demo\n            </TabsTrigger>\n            <TabsTrigger\n              value=\"code\"\n              className=\"relative text-base rounded-none border-b-transparent bg-transparent px-0 font-semibold text-muted-foreground shadow-none transition-colors duration-300 ease-out hover:text-foreground data-[state=active]:font-semibold data-[state=active]:text-foreground data-[state=active]:shadow-none data-[state=active]:bg-transparent\"\n            >\n              Code\n            </TabsTrigger>\n          </TabsList>\n        </div>\n        <TabsContent\n          value=\"preview\"\n          className=\"border border-black-500 flex rounded-2xl\"\n        >\n          <div className=\"w-full flex items-center justify-center rounded-2xl min-h-[530px] overflow-hidden relative max-h-[530px]\">\n            {/* <div className=\"absolute top-4 right-4 rounded-full border\">\n\n            </div> */}\n            <React.Suspense\n              fallback={\n                <div className=\"flex items-center justify-center w-full h-full text-sm text-muted-foreground\">\n                  <Icons.spinner className=\"mr-2 h-4 w-4 animate-spin\" />\n                  Loading...\n                </div>\n              }\n            >\n              {showRestartButton && (\n                <div className=\"absolute right-4 top-4 z-50 flex gap-2 flex-row\">\n                  <RestartButton onRestart={handleRestart} />\n                </div>\n              )}\n              <React.Fragment key={previewKey}>{Preview}</React.Fragment>\n            </React.Suspense>\n          </div>\n        </TabsContent>\n        <TabsContent value=\"code\">\n          <CodeSnippet\n            title={name + \".tsx\"}\n            code={sourceCode}\n            language=\"tsx\"\n          />\n        </TabsContent>\n      </Tabs>\n    </div>\n  )\n}\n",
      "type": "registry:ui",
      "target": "components/fancy/components/component-preview.tsx"
    }
  ]
}