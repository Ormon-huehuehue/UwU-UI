{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "image-trail",
  "type": "registry:ui",
  "dependencies": [
    "motion"
  ],
  "author": "daniel petho <https://www.danielpetho.com>",
  "registryDependencies": [
    "https://uwuui.com/r/utils.json"
  ],
  "files": [
    {
      "path": "fancy/image/image-trail.tsx",
      "content": "// author: Khoa Phan <https://www.pldkhoa.dev>\n\n\"use client\"\n\nimport React, { ElementType, HTMLAttributes, useEffect, useMemo } from \"react\"\nimport type { DOMKeyframesDefinition, AnimationOptions } from \"motion\"\nimport { useAnimate } from \"motion/react\"\n\nimport { cn } from \"@/lib/utils\"\n\ninterface ImageTrailProps extends HTMLAttributes<HTMLDivElement> {\n  /**\n   * The content to be displayed\n   */\n  children: React.ReactNode\n\n  /**\n   * HTML Tag\n   */\n  as?: ElementType\n\n  /**\n   * How much distance in pixels the mouse has to travel to trigger of an element to appear.\n   */\n  threshold?: number\n\n  /**\n   * The intensity for the momentum movement after showing the element. The value will be clamped > 0 and <= 1.0. Defaults to 0.3.\n   */\n  intensity?: number\n\n  /**\n   * Animation Keyframes for defining the animation sequence. Example: { scale: [0, 1, 1, 0] }\n   */\n  keyframes?: DOMKeyframesDefinition\n\n  /**\n   * Options for the animation/keyframes. Example: { duration: 1, times: [0, 0.1, 0.9, 1] }\n   */\n  keyframesOptions?: AnimationOptions\n\n  /**\n   * Animation keyframes for the x and y positions after showing the element. Describes how the element should try to arrive at the mouse position.\n   */\n  trailElementAnimationKeyframes?: {\n    x?: AnimationOptions\n    y?: AnimationOptions\n  }\n\n  /**\n   * The number of times the children will be repeated. Defaults to 3.\n   */\n  repeatChildren?: number\n\n  /**\n   * The base zIndex for all elements. Defaults to 0.\n   */\n  baseZIndex?: number\n\n  /**\n   * Controls stacking order behavior.\n   * - \"new-on-top\": newer elements stack above older ones (default)\n   * - \"old-on-top\": older elements stay visually on top\n   */\n  zIndexDirection?: \"new-on-top\" | \"old-on-top\"\n}\n\ninterface ImageTrailItemProps extends HTMLAttributes<HTMLDivElement> {\n  /**\n   * HTML Tag\n   */\n  as?: ElementType\n\n  /**\n   * The content to be displayed\n   */\n  children: React.ReactNode\n}\n\n/**\n * Helper functions\n */\nconst MathUtils = {\n  // linear interpolation\n  lerp: (a: number, b: number, n: number) => (1 - n) * a + n * b,\n  // distance between two points\n  distance: (x1: number, y1: number, x2: number, y2: number) =>\n    Math.hypot(x2 - x1, y2 - y1),\n}\n\nconst ImageTrail = ({\n  className,\n  as = \"div\",\n  children,\n  threshold = 100,\n  intensity = 0.3,\n  keyframes,\n  keyframesOptions,\n  repeatChildren = 3,\n  trailElementAnimationKeyframes = {\n    x: { duration: 1, type: \"tween\", ease: \"easeOut\" },\n    y: { duration: 1, type: \"tween\", ease: \"easeOut\" },\n  },\n  baseZIndex = 0,\n  zIndexDirection = \"new-on-top\",\n  ...props\n}: ImageTrailProps) => {\n  const allImages = React.useRef<NodeListOf<HTMLElement>>()\n  const currentId = React.useRef(0)\n  const lastMousePos = React.useRef({ x: 0, y: 0 })\n  const cachedMousePos = React.useRef({ x: 0, y: 0 })\n  const [containerRef, animate] = useAnimate()\n  const zIndices = React.useRef<number[]>([])\n\n  const clampedIntensity = useMemo(\n    () => Math.max(0.0001, Math.min(1, intensity)),\n    [intensity]\n  )\n\n  useEffect(() => {\n    allImages.current = containerRef?.current?.querySelectorAll(\n      \".image-trail-item\"\n    ) as NodeListOf<HTMLElement>\n\n    zIndices.current = Array.from(\n      { length: allImages.current.length },\n      (_, index) => index\n    )\n  }, [containerRef, allImages])\n\n  const handleMouseMove = (e: React.MouseEvent) => {\n    const containerRect = containerRef?.current?.getBoundingClientRect()\n    const mousePos = {\n      x: e.clientX - (containerRect?.left || 0),\n      y: e.clientY - (containerRect?.top || 0),\n    }\n\n    cachedMousePos.current.x = MathUtils.lerp(\n      cachedMousePos.current.x || mousePos.x,\n      mousePos.x,\n      clampedIntensity\n    )\n\n    cachedMousePos.current.y = MathUtils.lerp(\n      cachedMousePos.current.y || mousePos.y,\n      mousePos.y,\n      clampedIntensity\n    )\n\n    const distance = MathUtils.distance(\n      mousePos.x,\n      mousePos.y,\n      lastMousePos.current.x,\n      lastMousePos.current.y\n    )\n\n    if (distance > threshold && allImages?.current) {\n      const N = allImages.current.length\n      const current = currentId.current\n\n      if (zIndexDirection === \"new-on-top\") {\n        // Shift others down, put current on top\n        for (let i = 0; i < N; i++) {\n          if (i !== current) {\n            zIndices.current[i] -= 1\n          }\n        }\n        zIndices.current[current] = N - 1\n      } else {\n        // Shift others up, put current at bottom\n        for (let i = 0; i < N; i++) {\n          if (i !== current) {\n            zIndices.current[i] += 1\n          }\n        }\n        zIndices.current[current] = 0\n      }\n\n      allImages.current[current].style.display = \"block\"\n      allImages.current.forEach((img, index) => {\n        img.style.zIndex = String(zIndices.current[index] + baseZIndex)\n      })\n\n      animate(\n        allImages.current[currentId.current],\n        {\n          x: [\n            cachedMousePos.current.x -\n              allImages.current[currentId.current].offsetWidth / 2,\n            mousePos.x - allImages.current[currentId.current].offsetWidth / 2,\n          ],\n          y: [\n            cachedMousePos.current.y -\n              allImages.current[currentId.current].offsetHeight / 2,\n            mousePos.y -\n              allImages.current?.[currentId.current].offsetHeight / 2,\n          ],\n          ...keyframes,\n        },\n        {\n          ...trailElementAnimationKeyframes.x,\n          ...trailElementAnimationKeyframes.y,\n          ...keyframesOptions,\n        }\n      )\n      currentId.current = (current + 1) % N\n      lastMousePos.current = { x: mousePos.x, y: mousePos.y }\n    }\n  }\n\n  const ElementTag = as ?? \"div\"\n\n  return (\n    <ElementTag\n      className={cn(\"h-full w-full relative\", className)}\n      onMouseMove={handleMouseMove}\n      ref={containerRef}\n      {...props}\n    >\n      {Array.from({ length: repeatChildren }).map(() => (\n        <>{children}</>\n      ))}\n    </ElementTag>\n  )\n}\n\nexport const ImageTrailItem = ({\n  className,\n  children,\n  as = \"div\",\n  ...props\n}: ImageTrailItemProps) => {\n  const ElementTag = as ?? \"div\"\n  return (\n    <ElementTag\n      {...props}\n      className={cn(\n        \"absolute top-0 left-0 will-change-transform hidden\",\n        className,\n        \"image-trail-item\"\n      )}\n    >\n      {children}\n    </ElementTag>\n  )\n}\n\nexport default ImageTrail\n",
      "type": "registry:ui",
      "target": "components/fancy/image/image-trail.tsx"
    }
  ]
}