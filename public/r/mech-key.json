{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "mech-key",
  "type": "registry:ui",
  "dependencies": [
    "clsx",
    "tailwind-merge"
  ],
  "author": "daniel petho <https://www.danielpetho.com>",
  "registryDependencies": [
    "https://uwuui.com/r/utils.json"
  ],
  "files": [
    {
      "path": "components/mech-key.tsx",
      "content": "'use client'\nimport React, { useState, useRef, useEffect } from 'react'\nimport Image from 'next/image'\nimport { cn } from '@/utils/utils'\n\ntype SingleKeyProps = {\n  keyLabel?: string;\n  keyValue?: string;\n  className?: string;\n  onClick?: () => void;\n  autoReset?: boolean;\n  resetDelay?: number;\n}\n\nconst SingleKey = ({\n  keyLabel = \"âŒ˜\",\n  keyValue = \"Meta\",\n  className = \"\",\n  onClick,\n  autoReset = true,\n  resetDelay = 100\n}: SingleKeyProps) => {\n  const [isPressed, setIsPressed] = useState(false);\n  const audioRef = useRef<HTMLAudioElement | null>(null);\n\n  useEffect(() => {\n    audioRef.current = new Audio(\"https://cdn.freesound.org/previews/378/378085_6260145-lq.mp3\");\n  }, []);\n\n  useEffect(() => {\n    const handleKeyDown = (event: KeyboardEvent) => {\n      if (event.key === keyValue) {\n        setIsPressed(true);\n        playClickSound();\n      }\n    }\n\n    const handleKeyUp = (event: KeyboardEvent) => {\n      if (event.key === keyValue) {\n        setIsPressed(false);\n      }\n    }\n\n    window.addEventListener(\"keydown\", handleKeyDown);\n    window.addEventListener(\"keyup\", handleKeyUp);\n\n    return () => {\n      window.removeEventListener(\"keydown\", handleKeyDown);\n      window.removeEventListener(\"keyup\", handleKeyUp);\n    }\n  }, [keyValue]);\n\n  const playClickSound = () => {\n    if (!audioRef.current) return;\n    audioRef.current.volume = 0.4;\n    audioRef.current.currentTime = 0;\n    audioRef.current.play();\n  }\n\n  const handlePress = () => {\n    setIsPressed(true);\n    playClickSound();\n    \n    if (onClick) onClick();\n    \n    if (autoReset) {\n      setTimeout(() => {\n        setIsPressed(false);\n      }, resetDelay);\n    }\n  }\n\n  return (\n    <div className='relative aspect-[400/310] flex items-center justify-center w-[clamp(200px,30vw,300px)] transition-all duration-[260ms] ease-out [transform-style:preserve-3d]'>\n      <button\n        className={cn(\n          \"absolute w-[50%] h-[50%] cursor-pointer [transform-style:preserve-3d] select-none left-1/2 top-1/2 -translate-x-1/2 -translate-y-1/2\",\n          className\n        )}\n        style={{\n          clipPath: 'polygon(0 0, 54% 0, 89% 24%, 100% 70%, 54% 100%, 46% 100%, 0 69%, 12% 23%, 47% 0%)',\n          mask: 'url(https://assets.codepen.io/605876/keypad-single.png?format=auto&quality=86) 50% 50% / 100% 100%'\n        }}\n        onClick={handlePress}\n      >\n        <span className=\"w-full h-full inline-block\">\n          <span \n            className={cn(\n              \"active:translate-y-[26px] transition-all duration-[176ms] w-full h-full inline-block [container-type:inline-size]\", \n              isPressed ? \"translate-y-[26px] transition-all duration-[176ms]\" : \"\"\n            )}\n          >\n            <span \n              style={{ transform: 'rotateX(36deg) rotateY(45deg) rotateX(-90deg)' }} \n              className=\"absolute z-50 top-[5%] left-1/2 -translate-x-1/2\"\n            >\n              <span className=\"text-black text-[22cqi] pointer-events-none\">{keyLabel}</span>\n            </span>\n            <img\n              src=\"https://assets.codepen.io/605876/keypad-single.png?format=auto&quality=86\"\n              alt=\"\"\n              style={{\n                \"--brightness\": 2,\n                \"--saturate\": 0,\n                filter: 'hue-rotate(calc(var(--hue, 0) * 1deg)) saturate(var(--saturate, 1)) brightness(var(--brightness, 1))'\n              } as any}\n              className=\"pointer-events-none absolute top-0 w-[96%] left-1/2 -translate-x-1/2\"\n            />\n          </span>\n        </span>\n      </button>\n    </div>\n  )\n}\n\nexport default SingleKey\n",
      "type": "registry:ui",
      "target": "components/fancy/components/mech-key.tsx"
    }
  ]
}