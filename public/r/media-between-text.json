{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "media-between-text",
  "type": "registry:ui",
  "dependencies": [
    "motion"
  ],
  "author": "daniel petho <https://www.danielpetho.com>",
  "registryDependencies": [
    "https://uwuui.com/r/utils.json"
  ],
  "files": [
    {
      "path": "fancy/blocks/media-between-text.tsx",
      "content": "\"use client\"\n\nimport { ElementType, forwardRef, useImperativeHandle, useRef, useState } from \"react\"\nimport { motion, useInView, UseInViewOptions, Variants } from \"motion/react\"\n\nimport { cn } from \"@/lib/utils\"\n\ninterface MediaBetweenTextProps {\n  /**\n   * The text to display before the media\n   */\n  firstText: string\n\n  /**\n   * The text to display after the media\n   */\n  secondText: string\n\n  /**\n   * URL of the media (image or video) to display\n   */\n  mediaUrl: string\n\n  /**\n   * Type of media to display\n   */\n  mediaType: \"image\" | \"video\"\n\n  /**\n   * Optional class name for the media container\n   */\n  mediaContainerClassName?: string\n\n  /**\n   * Fallback URL for video poster or image loading\n   */\n  fallbackUrl?: string\n\n  /**\n   * HTML Tag to render the text elements as\n   * @default p\n   */\n  as?: ElementType\n\n  /**\n   * Whether video should autoplay\n   * @default true\n   */\n  autoPlay?: boolean\n\n  /**\n   * Whether video should loop\n   * @default true\n   */\n  loop?: boolean\n\n  /**\n   * Whether video should be muted\n   * @default true\n   */\n  muted?: boolean\n\n  /**\n   * Whether video should play inline\n   * @default true\n   */\n  playsInline?: boolean\n\n  /**\n   * Alt text for image\n   */\n  alt?: string\n\n  /**\n   * Type of animation trigger\n   * @default \"hover\"\n   */\n  triggerType?: \"hover\" | \"ref\" | \"inView\"\n\n  /**\n   * Reference to container element for inView trigger\n   */\n  containerRef?: React.RefObject<HTMLDivElement>\n\n  /**\n   * Options for useInView hook\n   */\n  useInViewOptionsProp?: UseInViewOptions\n\n  /**\n   * Custom animation variants\n   */\n  animationVariants?: {\n    initial: Variants[\"initial\"]\n    animate: Variants[\"animate\"]\n  }\n\n  /**\n   * Optional class name for the root element\n   */\n  className?: string\n\n  /**\n   * Optional class name for the left text element\n   */\n  leftTextClassName?: string\n\n  /**\n   * Optional class name for the right text element\n   */\n  rightTextClassName?: string\n}\n\nexport type MediaBetweenTextRef = {\n  animate: () => void\n  reset: () => void\n}\n\nexport const MediaBetweenText = forwardRef<\n  MediaBetweenTextRef,\n  MediaBetweenTextProps\n>(\n  (\n    {\n      firstText,\n      secondText,\n      mediaUrl,\n      mediaType,\n      mediaContainerClassName,\n      fallbackUrl,\n      as = \"p\",\n      autoPlay = true,\n      loop = true,\n      muted = true,\n      playsInline = true,\n      alt,\n      triggerType = \"hover\",\n      containerRef,\n      useInViewOptionsProp = {\n        once: true,\n        amount: 0.5,\n        root: containerRef,\n      },\n      animationVariants = {\n        initial: { width: 0, opacity: 1 },\n        animate: {\n          width: \"auto\",\n          opacity: 1,\n          transition: { duration: 0.4, type: \"spring\", bounce: 0 },\n        },\n      },\n      className,\n      leftTextClassName,\n      rightTextClassName,\n    },\n    ref\n  ) => {\n    const componentRef = useRef<HTMLDivElement>(null)\n    const [isAnimating, setIsAnimating] = useState(false)\n\n    const isInView =\n      triggerType === \"inView\"\n        ? useInView(componentRef || containerRef, useInViewOptionsProp)\n        : false\n    const [isHovered, setIsHovered] = useState(false)\n\n    useImperativeHandle(ref, () => ({\n      animate: () => setIsAnimating(true),\n      reset: () => setIsAnimating(false),\n    }))\n\n    const shouldAnimate =\n      triggerType === \"hover\"\n        ? isHovered\n        : triggerType === \"inView\"\n          ? isInView\n          : triggerType === \"ref\"\n            ? isAnimating\n            : false\n\n    const TextComponent = motion.create(as)\n\n    return (\n      <div\n        className={cn(\"flex\", className)}\n        ref={componentRef}\n        onMouseEnter={() => triggerType === \"hover\" && setIsHovered(true)}\n        onMouseLeave={() => triggerType === \"hover\" && setIsHovered(false)}\n      >\n        <TextComponent layout className={leftTextClassName}>\n          {firstText}\n        </TextComponent>\n        <motion.div\n          className={mediaContainerClassName}\n          variants={animationVariants}\n          initial=\"initial\"\n          animate={shouldAnimate ? \"animate\" : \"initial\"}\n        >\n          {mediaType === \"video\" ? (\n            <video\n              className=\"w-full h-full object-cover\"\n              autoPlay={autoPlay}\n              loop={loop}\n              muted={muted}\n              playsInline={playsInline}\n              poster={fallbackUrl}\n            >\n              <source src={mediaUrl} type=\"video/mp4\" />\n            </video>\n          ) : (\n            <img\n              src={mediaUrl}\n              alt={alt || `${firstText} ${secondText}`}\n              className=\"w-full h-full object-cover\"\n            />\n          )}\n        </motion.div>\n        <TextComponent layout className={rightTextClassName}>\n          {secondText}\n        </TextComponent>\n      </div>\n    )\n  }\n)\n\nMediaBetweenText.displayName = \"MediaBetweenText\"\n\nexport default MediaBetweenText\n",
      "type": "registry:ui",
      "target": "components/fancy/blocks/media-between-text.tsx"
    }
  ]
}