{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "letter-3d-swap-explanation-left-demo",
  "type": "registry:block",
  "dependencies": [
    "motion"
  ],
  "author": "daniel petho <https://www.danielpetho.com>",
  "files": [
    {
      "path": "examples/text/letter-3d-swap-explanation-left-demo.tsx",
      "content": "/*\n * If you're reading this file, you're probably looking for the explanation demo.\n * Keep in my mind this demo contains some extra transforms that are only needed\n * for making the animation prettier, and not necessary for the actual functionality.\n * There is a lot of messy code here, so I advise you not to try learn from it.\n * Please refer to the actual documentation for more details.\n */\n\"use client\"\n\nimport { useEffect, useState } from \"react\"\nimport { AnimatePresence, motion } from \"motion/react\"\n\ninterface AxisHelperProps {\n  axisLength: number\n}\n\nexport const AxisHelper = ({ axisLength }: AxisHelperProps) => {\n  // Arrowhead size\n  const arrowSize = 12\n\n  return (\n    <div\n      className=\"pointer-events-none transform-3d\"\n      style={{\n        transform: \"translateY(-100px) translateZ(-100px) translateX(-100px)\",\n      }}\n    >\n      {/* X axis (red, right) */}\n      <svg\n        width={axisLength + arrowSize}\n        height={arrowSize * 2}\n        style={{\n          position: \"absolute\",\n          left: 0,\n          top: 0,\n          transform: `translateY(-${arrowSize}px)`,\n        }}\n      >\n        <line\n          x1={0}\n          y1={arrowSize}\n          x2={axisLength}\n          y2={arrowSize}\n          stroke=\"currentColor\"\n          strokeOpacity=\"0.6\"\n          strokeWidth={2}\n          strokeDasharray=\"6,4\"\n        />\n        <polygon\n          points={`\n              ${axisLength},${arrowSize}\n              ${axisLength - arrowSize},${arrowSize - 5}\n              ${axisLength - arrowSize},${arrowSize + 5}\n            `}\n          fill=\"currentColor\"\n        />\n      </svg>\n\n      {/* Y axis (green, up) */}\n      <svg\n        width={arrowSize * 10}\n        height={axisLength + arrowSize}\n        style={{\n          position: \"absolute\",\n          left: 0,\n          top: 0,\n          transform: `translateX(-${arrowSize}px) translateY(-${axisLength}px)`,\n        }}\n      >\n        <line\n          x1={arrowSize}\n          y1={axisLength}\n          x2={arrowSize}\n          y2={0}\n          stroke=\"currentColor\"\n          strokeOpacity=\"0.6\"\n          strokeWidth={2}\n          strokeDasharray=\"6,4\"\n        />\n        <polygon\n          points={`\n              ${arrowSize},0\n              ${arrowSize - 5},${arrowSize}\n              ${arrowSize + 5},${arrowSize}\n            `}\n          fill=\"currentColor\"\n        />\n      </svg>\n\n      <svg\n        width={arrowSize * 2}\n        height={axisLength + arrowSize}\n        style={{\n          position: \"absolute\",\n          left: 0,\n          top: 0,\n          transform: `translateX(-${arrowSize * 1.8}px) translateY(-${axisLength}px) rotateX(90deg) rotateY(90deg) translateX(${axisLength / 2}px) rotateX(180deg) translateY(-${axisLength / 2 - arrowSize * 1}px)`,\n        }}\n      >\n        <line\n          x1={arrowSize}\n          y1={axisLength}\n          x2={arrowSize}\n          y2={0}\n          stroke=\"currentColor\"\n          strokeOpacity=\"0.6\"\n          strokeWidth={2}\n          strokeDasharray=\"6,4\"\n        />\n        <polygon\n          points={`\n              ${arrowSize},0\n              ${arrowSize - 5},${arrowSize}\n              ${arrowSize + 5},${arrowSize}\n            `}\n          fill=\"currentColor\"\n        />\n      </svg>\n    </div>\n  )\n}\nexport default function Preview() {\n  const [step, setStep] = useState(0)\n  const totalSteps = 8\n\n  useEffect(() => {\n    const interval = setInterval(\n      () => {\n        setStep((prev) => {\n          if (prev === totalSteps - 1) {\n            // Wait longer on the last step\n            return 0\n          }\n          return prev + 1\n        })\n      },\n      step === totalSteps - 1 ? 5000 : 3000\n    ) // 4 seconds for last step, 2 seconds for others\n\n    return () => clearInterval(interval)\n  }, [step])\n\n  const getSecondFaceTransform = () => {\n    switch (step) {\n      case 0:\n        return `rotateY(0deg)`\n      case 1:\n        return `rotateY(90deg)`\n      case 2:\n        return `rotateY(90deg) translateX(-50%)`\n      case 3:\n        return \"rotateY(90deg) translateX(-50%) rotateY(-90deg)\"\n      case 4:\n        return \"rotateY(90deg) translateX(-50%) rotateY(-90deg) translateX(50%)\"\n      case 5:\n        return \"rotateY(90deg) translateX(-50%) rotateY(-90deg) translateX(50%) rotateY(-90deg)\"\n      case 6:\n        return \"rotateY(90deg) translateX(-50%) rotateY(-90deg) translateX(50%) rotateY(-90deg) translateX(-50%)\"\n      case 7:\n        return \"rotateY(90deg) translateX(-50%) rotateY(-90deg) translateX(50%) rotateY(-90deg) translateX(-50%)\"\n      default:\n        return \"rotateX(0deg)\"\n    }\n  }\n\n  const getFirstFaceTransform = () => {\n    switch (step) {\n      case 0:\n        return `rotateY(0deg) translateZ(0.001lh)`\n      case 1:\n        return `rotateY(90deg) translateZ(0.001lh)`\n      case 2:\n        return `rotateY(90deg) translateX(-50%) translateZ(0.01lh)`\n      case 3:\n        return \"rotateY(90deg) translateX(-50%) rotateY(-90deg) translateZ(0.001lh)\"\n      case 4:\n        return \"rotateY(90deg) translateX(-50%) rotateY(-90deg) translateZ(0.001lh)\"\n      case 5:\n        return \"rotateY(90deg) translateX(-50%) rotateY(-90deg) translateZ(0.001lh)\"\n      case 6:\n        return \"rotateY(90deg) translateX(-50%) rotateY(-90deg) translateZ(0.001lh)\"\n      case 7:\n        return \"rotateY(90deg) translateX(-50%) rotateY(-90deg) translateZ(0.001lh)\"\n      default:\n        return \"rotateY(0deg) translateZ(0.001lh)\"\n    }\n  }\n\n  const getContainerTransform = () => {\n    switch (step) {\n      case 0:\n        return \"translateZ(0)\"\n      case 1:\n        return \"translateZ(0)\"\n      case 2:\n        return \"translateZ(0)\"\n      case 3:\n        return \"translateZ(0)\"\n      case 4:\n        return \"translateZ(0)\"\n      case 5:\n        return \"translateZ(0)\"\n      case 6:\n        return \"translateZ(0lh)\"\n      case 7:\n        return \"rotateY(90deg) translateX(50%) rotateY(-90deg)\"\n      default:\n        return \"translateZ(0)\"\n    }\n  }\n\n  const getDisplayTransform = () => {\n    switch (step) {\n      case 0:\n        return [\" \", \" \"]\n      case 1:\n        return [\"both faces:\", \"rotateY(90deg)\"]\n      case 2:\n        return [\"both faces:\", \"rotateY(90deg) translateX(50%)\"]\n      case 3:\n        return [\"both faces:\", \"rotateY(90deg) translateX(50%) rotateY(-90deg)\"]\n      case 4:\n        return [\n          \"2nd face:\",\n          \"rotateY(90deg) translateX(50%) rotateY(-90deg) translateX(-50%)\",\n        ]\n      case 5:\n        return [\n          \"2nd face:\",\n          \"rotateY(90deg) translateX(50%) rotateY(-90deg) translateX(-50%) rotateY(-90deg)\",\n        ]\n      case 6:\n        return [\n          \"2nd face:\",\n          \"rotateY(90deg) translateX(50%) rotateY(-90deg) translateX(-50%) rotateY(-90deg) translateX(50%)\",\n        ]\n      case 7:\n        return [\"container:\", \"rotateY(90deg) translateX(50%) rotateY(-90deg)\"]\n      default:\n        return [\" \", \" \"]\n    }\n  }\n\n  return (\n    <div className=\"relative w-dvw h-dvh flex flex-col items-center justify-center bg-background\">\n      <div className=\"flex flex-col items-center max-w-2xl\">\n        <motion.div\n          className=\"text-9xl transform-3d perspective-1000\"\n          style={{ transform: \"rotateX(-25deg) rotateY(-45deg)\" }}\n        >\n          {/* Axes helper */}\n          <div className=\"absolute top-[150%] left-1/2 -translate-x-1/2 -translate-y-1/2 transform-3d\">\n            <AxisHelper axisLength={200} />\n          </div>\n\n          <motion.div\n            className=\"transform-3d relative z-20 backface-hidden\"\n            animate={{ transform: getContainerTransform() }}\n            transition={{\n              ease: \"easeInOut\",\n              duration: 1,\n            }}\n          >\n            {/* Front face */}\n            <motion.div\n              className=\"border border-foreground h-[1lh] dark:bg-neutral-800 opacity-80 bg-gray-200 text-foreground\"\n              animate={{ transform: getFirstFaceTransform() }}\n              transition={{\n                ease: \"easeInOut\",\n                duration: 1,\n              }}\n            >\n              A\n            </motion.div>\n\n            {/* Second face */}\n            <motion.div\n              className=\"absolute top-0 left-0 border border-foreground opacity-60 h-[1lh] bg-gray-200 dark:bg-neutral-800 text-foreground\"\n              animate={{ transform: getSecondFaceTransform() }}\n              transition={{\n                ease: \"easeInOut\",\n                duration: 1,\n              }}\n            >\n              A\n            </motion.div>\n          </motion.div>\n        </motion.div>\n\n        {/* Transform display */}\n        <div className=\"absolute bottom-1/6 flex items-center h-[1lh] w-full px-16 sm:px-0 sm:w-64\">\n          <div className=\"flex w-1/3  min-w-12 min-h-[1lh]\">\n            <AnimatePresence mode=\"wait\" initial={false}>\n              <motion.span\n                key={getDisplayTransform()[0]}\n                initial={{ opacity: 0, y: 10 }}\n                animate={{ opacity: 1, y: 0 }}\n                exit={{ opacity: 0, y: -10 }}\n                transition={{ duration: 0.2, delay: 0, ease: \"easeOut\" }}\n                className=\"font-overusedGrotesk text-muted-foreground  w-full text-end\"\n              >\n                {getDisplayTransform()[0]}\n              </motion.span>\n            </AnimatePresence>\n          </div>\n          <div className=\"flex w-2/3 min-w-12 min-h-[1lh]\">\n            <AnimatePresence mode=\"wait\">\n              <motion.span\n                key={getDisplayTransform()[1]}\n                initial={{ opacity: 0, y: 10 }}\n                animate={{ opacity: 1, y: 0 }}\n                exit={{ opacity: 0, y: -10 }}\n                transition={{ duration: 0.2, delay: 0, ease: \"easeOut\" }}\n                className=\"pl-8 font-mono text-xs text-muted-foreground  pt-1 w-full \"\n              >\n                {getDisplayTransform()[1]}\n              </motion.span>\n            </AnimatePresence>\n          </div>\n        </div>\n      </div>\n    </div>\n  )\n}\n",
      "type": "registry:block",
      "target": "components/fancy/text/letter-3d-swap-explanation-left-demo.tsx"
    }
  ],
  "cssVars": {
    ":root": {
      "red": "#ff5941",
      "orange": "#f97316",
      "pink": "#e794da",
      "blue": "#0015ff",
      "teal": "#1f464d",
      "teal-foreground": "#3bb6ab",
      "yellow": "#eab308",
      "yellow-foreground": "#ffd726",
      "primary-red": "var(--red)",
      "primary-orange": "var(--orange)",
      "primary-pink": "var(--pink)",
      "primary-blue": "var(--blue)"
    }
  },
  "tailwind": {
    "config": {
      "theme": {
        "extend": {}
      }
    }
  }
}