{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "element-along-svg-path",
  "type": "registry:ui",
  "dependencies": [
    "motion"
  ],
  "author": "daniel petho <https://www.danielpetho.com>",
  "registryDependencies": [
    "https://uwuui.com/r/utils.json"
  ],
  "files": [
    {
      "path": "fancy/blocks/element-along-svg-path.tsx",
      "content": "import {\n  createContext,\n  RefObject,\n  useContext,\n  useEffect,\n  useRef,\n  useState,\n} from \"react\"\nimport {\n  motion,\n  MotionValue,\n  useMotionValue,\n  useScroll,\n  UseScrollOptions,\n  useSpring,\n  useTime,\n  useTransform,\n} from \"motion/react\"\n\nimport { cn } from \"@/lib/utils\"\n\ntype PreserveAspectRatioAlign =\n  | \"none\"\n  | \"xMinYMin\"\n  | \"xMidYMin\"\n  | \"xMaxYMin\"\n  | \"xMinYMid\"\n  | \"xMidYMid\"\n  | \"xMaxYMid\"\n  | \"xMinYMax\"\n  | \"xMidYMax\"\n  | \"xMaxYMax\"\n\ntype PreserveAspectRatioMeetOrSlice = \"meet\" | \"slice\"\n\ntype PreserveAspectRatio =\n  | PreserveAspectRatioAlign\n  | `${Exclude<PreserveAspectRatioAlign, \"none\">} ${PreserveAspectRatioMeetOrSlice}`\n\ninterface ElementAlongPathProps {\n  // Path properties\n  path: string\n  pathId?: string\n  className?: string\n  preserveAspectRatio?: PreserveAspectRatio\n  showPath?: boolean\n  direction?: \"normal\" | \"reverse\"\n\n  // SVG properties\n  width?: string | number\n  height?: string | number\n  viewBox?: string\n\n  // Animation properties\n  animationType?: \"auto\" | \"scroll\"\n\n  // Animation properties if animationType is auto\n  duration?: number\n  transition?: any\n\n  // Scroll animation properties if animationType is scroll\n  scrollContainer?: RefObject<HTMLElement>\n  scrollOffset?: UseScrollOptions[\"offset\"]\n  scrollTransformValues?: [number, number]\n\n  // Children\n  children?: React.ReactNode\n}\n\ninterface ElementAlongPathItemProps {\n  children: React.ReactNode\n  className?: string\n  startOffset?: number // 0-100 percentage\n  transition?: any // Override parent transition\n}\n\n// Create context\nconst ElementAlongPathContext = createContext<{\n  path: string\n  animationType: \"auto\" | \"scroll\"\n  direction: \"normal\" | \"reverse\" // Add direction to context\n  progress: MotionValue<number>\n  scrollYProgress: MotionValue<number>\n  scrollTransformValues: [number, number]\n  transition: any\n  setHovered: (isHovered: boolean) => void\n} | null>(null)\n\n// Context hook\nexport const useElementAlongPathContext = () => {\n  const context = useContext(ElementAlongPathContext)\n  if (!context) {\n    throw new Error(\"ElementAlongPathItem must be used within ElementAlongPath\")\n  }\n  return context\n}\n\n// Item component\nexport const ElementAlongPathItem = ({\n  children,\n  className,\n  startOffset = 0,\n  transition: itemTransition,\n}: ElementAlongPathItemProps) => {\n  const {\n    path,\n    animationType,\n    progress,\n    scrollYProgress,\n    scrollTransformValues,\n    direction,\n    transition: parentTransition,\n    setHovered,\n  } = useElementAlongPathContext()\n\n  // Use item transition if provided, otherwise use parent transition\n  const transition = itemTransition || parentTransition\n\n  const initialOffset =\n    direction === \"normal\" ? `${startOffset}%` : `${100 - startOffset}%`\n  const animateOffset = direction === \"normal\" ? \"100%\" : \"0%\"\n\n  const scp = useTransform(\n    scrollYProgress,\n    [0, 1],\n    [scrollTransformValues[0], scrollTransformValues[1]]\n  )\n\n  return (\n    <motion.div\n      className={cn(\"absolute top-0 left-0\", className)}\n      initial={{ offsetDistance: initialOffset }}\n      animate={{\n        offsetDistance: animationType === \"auto\" ? animateOffset : undefined,\n      }}\n      style={{\n        offsetPath: `path('${path}')`,\n        offsetDistance: animationType === \"scroll\" ? scp : undefined,\n      }}\n      transition={transition}\n      // onHoverStart={() => setHovered(true)}\n      // onHoverEnd={() => setHovered(false)}\n    >\n      {children}\n    </motion.div>\n  )\n}\n\nconst ElementAlongPath = ({\n  children,\n  // Path defaults\n  path,\n  pathId,\n  preserveAspectRatio = \"xMidYMid meet\",\n  showPath = false,\n  className,\n\n  // SVG defaults\n  width = \"100%\",\n  height = \"100%\",\n  viewBox = \"0 0 100 100\",\n\n  // Animation type\n  animationType = \"auto\",\n  direction = \"normal\",\n\n  // Animation defaults\n  duration = 4,\n  transition = { duration: 4, repeat: Infinity, ease: \"linear\" },\n\n  // Scroll animation defaults\n  scrollContainer,\n  scrollOffset = [\"start end\", \"end end\"],\n  scrollTransformValues = [0, 100],\n}: ElementAlongPathProps) => {\n  const container = useRef<HTMLDivElement>(null)\n  const [isHovered, setIsHovered] = useState(false)\n\n  // Create a time scale factor that changes based on hover state\n  const timeScale = useMotionValue(1)\n\n  // Update time scale when hover state changes\n  useEffect(() => {\n    timeScale.set(isHovered ? 0.3 : 1) // Slow down to 30% speed when hovered\n  }, [isHovered, timeScale])\n\n  // Create a spring-based time scale for smooth transitions\n  const smoothTimeScale = useSpring(timeScale, {\n    stiffness: 100,\n    damping: 30,\n  })\n\n  const t = useTime()\n  const scaledTime = useTransform(t, (time) => time * smoothTimeScale.get())\n\n  const progress = useTransform(\n    scaledTime,\n    [0, duration],\n    direction === \"normal\" ? [0, 100] : [100, 0]\n  )\n  // naive id for the path. you should rather use yours :)\n  const id =\n    pathId || `animated-path-${Math.random().toString(36).substring(7)}`\n\n  const { scrollYProgress } = useScroll({\n    container: scrollContainer || container,\n    offset: scrollOffset,\n  })\n\n  // Adjust scroll progress based on direction\n  const scrollProgressValues =\n    direction === \"normal\"\n      ? [scrollTransformValues[0], scrollTransformValues[1]]\n      : [scrollTransformValues[1], scrollTransformValues[0]]\n\n  const scrollProgress = useTransform(\n    scrollYProgress,\n    [0, 1],\n    scrollProgressValues\n  )\n\n  // Create the progress value based on animation type\n  const finalProgress = animationType === \"auto\" ? progress : scrollProgress\n\n  return (\n    <ElementAlongPathContext.Provider\n      value={{\n        path,\n        animationType,\n        direction,\n        progress: finalProgress,\n        scrollYProgress,\n        scrollTransformValues,\n        transition: {\n          ...transition,\n        },\n        setHovered: setIsHovered,\n      }}\n    >\n      <div\n        ref={container}\n        className={cn(\"relative\", className)}\n      >\n        <svg\n          xmlns=\"http://www.w3.org/2000/svg\"\n          viewBox={viewBox}\n          width={width}\n          height={height}\n          preserveAspectRatio={preserveAspectRatio}\n          className=\"w-full h-full\"\n        >\n          <motion.path\n            id={id}\n            d={path}\n            // initial={{ pathLength: 0.001 }}\n            // animate={{ pathLength: 1 }}\n            stroke={showPath ? \"currentColor\" : \"none\"}\n            fill=\"none\"\n            transition={transition}\n          />\n        </svg>\n        {children}\n      </div>\n    </ElementAlongPathContext.Provider>\n  )\n}\n\nexport default ElementAlongPath\n",
      "type": "registry:ui",
      "target": "components/fancy/blocks/element-along-svg-path.tsx"
    }
  ]
}