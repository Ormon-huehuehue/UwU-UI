{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "goey-button",
  "type": "registry:ui",
  "dependencies": [
    "motion"
  ],
  "author": "daniel petho <https://www.danielpetho.com>",
  "files": [
    {
      "path": "components/goey-button.tsx",
      "content": "'use client';\n\nimport React, { useState, useRef, useMemo, useEffect } from 'react';\nimport { motion, MotionConfig } from 'motion/react';\n\n// Gooey Effect Component\ninterface GooeyEffectProps {\n  intensity?: number;\n  id?: string;\n  className?: string;\n}\n\nconst GooeyEffect: React.FC<GooeyEffectProps> = ({ \n  intensity = 7, \n  id: providedId,\n  className = ''\n}) => {\n  const ref = useRef<HTMLDivElement>(null);\n  const instanceId = useMemo(() => generateRandomString(), []);\n  const id = providedId ? hash(providedId) : instanceId;\n  const [parentId, setParentId] = useState('');\n\n  useEffect(() => {\n    if (ref.current) {\n      const parent = ref.current.parentElement?.parentElement;\n      if (parent) {\n        setParentId(parent.id || parent.className || '');\n      }\n    }\n\n    return () => {\n      if (ref.current) {\n        const parent = ref.current.parentElement?.parentElement;\n        if (parent) {\n          parent.style.filter = '';\n        }\n      }\n    };\n  }, []);\n\n  const isSafari = () => {\n    if (typeof navigator === 'undefined') return false;\n    return /^((?!chrome|android).)*safari/i.test(navigator.userAgent);\n  };\n\n  return (\n    <div ref={ref} className={`gooey-component ${className}`} style={{ display: 'none' }}>\n      {!isSafari() && (\n        <style\n          dangerouslySetInnerHTML={{\n            __html: `\n              ${parentId ? `div:has(> .delete-button-container) { filter: url(#goo-${id}) !important }` : ''}\n            `\n          }}\n        />\n      )}\n      <svg xmlns=\"http://www.w3.org/2000/svg\" version=\"1.1\">\n        <defs>\n          <filter id={`goo-${id}`}>\n            <feGaussianBlur in=\"SourceGraphic\" stdDeviation={intensity} result=\"blur\" />\n            <feColorMatrix \n              in=\"blur\" \n              mode=\"matrix\" \n              values=\"1 0 0 0 0  0 1 0 0 0  0 0 1 0 0  0 0 0 19 -8\" \n              result=\"goo\" \n            />\n            <feComposite in=\"SourceGraphic\" in2=\"goo\" operator=\"atop\" />\n          </filter>\n        </defs>\n      </svg>\n    </div>\n  );\n};\n\n// Delete Button Component\ninterface DeleteButtonProps {\n  onDelete?: () => void;\n  onCancel?: () => void;\n  className?: string;\n  variant?: 'default' | 'confirm' | 'going-back';\n}\n\ntype ButtonVariant = 'default' | 'confirm' | 'going-back';\n\nconst DeleteButton: React.FC<DeleteButtonProps> = ({ \n  onDelete, \n  onCancel, \n  className = '',\n  variant: controlledVariant\n}) => {\n  const [variant, setVariant] = useState<ButtonVariant>('default');\n  const [isPressed, setIsPressed] = useState(false);\n\n  // Use controlled variant if provided, otherwise use internal state\n  const currentVariant = controlledVariant || variant;\n\n  const handleDeleteClick = () => {\n    if (currentVariant === 'default') {\n      setVariant('confirm');\n    }\n  };\n\n  const handleConfirmClick = () => {\n    onDelete?.();\n    // Optionally reset to default after a delay\n    setTimeout(() => setVariant('default'), 300);\n  };\n\n  const handleCancelClick = () => {\n    setVariant('going-back');\n    setTimeout(() => {\n      setVariant('default');\n      onCancel?.();\n    }, 300);\n  };\n\n  const transitions = {\n    spring: { type: 'spring', bounce: 0.3, duration: 1 },\n    springFast: { type: 'spring', bounce: 0.3, duration: 0.7, delay: 0.05 }\n  };\n\n  const getButtonStyles = () => {\n    const baseStyles = {\n      backgroundColor: 'rgb(225, 34, 7)',\n      borderRadius: '16px',\n      scale: 1\n    };\n\n    switch (currentVariant) {\n      case 'confirm':\n        return { ...baseStyles, backgroundColor: 'rgb(0, 0, 0)' };\n      case 'going-back':\n        return { ...baseStyles, backgroundColor: 'rgb(0, 0, 0)', scale: 0.9 };\n      default:\n        return isPressed \n          ? { ...baseStyles, backgroundColor: 'rgb(0, 0, 0)', scale: 0.9 }\n          : baseStyles;\n    }\n  };\n\n  const getTextOpacity = (textType: 'delete' | 'confirm') => {\n    if (textType === 'delete') {\n      return currentVariant === 'default' ? 1 : 0;\n    } else {\n      return currentVariant === 'confirm' || currentVariant === 'going-back' ? 1 : 0;\n    }\n  };\n\n  const getCloseButtonStyles = () => {\n    return {\n      backgroundColor: 'rgb(0, 0, 0)',\n      borderRadius: '100px',\n      right: currentVariant === 'confirm' ? '-56px' : '5px'\n    };\n  };\n\n  const getIconRotation = () => {\n    return currentVariant === 'confirm' ? 0 : 60;\n  };\n\n  return (\n    <MotionConfig transition={transitions.spring}>\n      <div className={`delete-button-container ${className}`}>\n        <motion.div\n          className=\"delete-button-wrapper\"\n          style={{\n            display: 'flex',\n            alignItems: 'center',\n            justifyContent: 'center',\n            gap: '10px',\n            position: 'relative',\n            cursor: currentVariant === 'default' ? 'pointer' : 'default',\n            width: 'min-content',\n            height: 'min-content'\n          }}\n          onTap={currentVariant === 'default' ? handleDeleteClick : undefined}\n          onTapStart={() => setIsPressed(true)}\n        //   onTapEnd={() => setIsPressed(false)}\n          onTapCancel={() => setIsPressed(false)}\n        >\n          {/* Main Button */}\n          <motion.div\n            style={{\n              display: 'flex',\n              alignItems: 'center',\n              justifyContent: 'center',\n              padding: '0 26px',\n              height: '44px',\n              cursor: 'pointer',\n              position: 'relative',\n              zIndex: 2,\n              overflow: 'hidden',\n              ...getButtonStyles()\n            }}\n            animate={getButtonStyles()}\n            transition={transitions.spring}\n          >\n            {/* Delete Text */}\n            <MotionConfig transition={transitions.springFast}>\n              <motion.p\n                style={{\n                  fontFamily: '\"Inter\", sans-serif',\n                  fontWeight: 600,\n                  color: 'rgb(255, 255, 255)',\n                  margin: 0,\n                  whiteSpace: 'pre',\n                  userSelect: 'none'\n                }}\n                animate={{ opacity: getTextOpacity('delete') }}\n              >\n                Delete\n              </motion.p>\n            </MotionConfig>\n\n            {/* Confirm Text */}\n            <MotionConfig transition={transitions.springFast}>\n              <motion.p\n                style={{\n                  fontFamily: '\"Inter\", sans-serif',\n                  fontWeight: 600,\n                  color: 'rgb(255, 255, 255)',\n                  margin: 0,\n                  whiteSpace: 'pre',\n                  userSelect: 'none',\n                  position: 'absolute',\n                  left: '50%',\n                  top: '50%',\n                  transform: 'translate(-50%, -50%)',\n                  zIndex: 1\n                }}\n                animate={{ opacity: getTextOpacity('confirm') }}\n              >\n                Confirm\n              </motion.p>\n            </MotionConfig>\n          </motion.div>\n\n          {/* Close Button */}\n          <motion.div\n            style={{\n              position: 'absolute',\n              top: '50%',\n              transform: 'translateY(-50%)',\n              width: '40px',\n              height: '40px',\n              display: 'flex',\n              alignItems: 'center',\n              justifyContent: 'center',\n              cursor: currentVariant === 'confirm' ? 'pointer' : 'default',\n              zIndex: 1,\n              ...getCloseButtonStyles()\n            }}\n            animate={getCloseButtonStyles()}\n            onTap={currentVariant === 'confirm' ? handleCancelClick : undefined}\n          >\n            <motion.div\n              style={{\n                width: '20px',\n                height: '20px',\n                overflow: 'hidden'\n              }}\n              animate={{ rotateX: getIconRotation() }}\n            >\n              <svg\n                width=\"20\"\n                height=\"20\"\n                viewBox=\"0 0 20 20\"\n                fill=\"none\"\n                xmlns=\"http://www.w3.org/2000/svg\"\n                style={{\n                  position: 'absolute',\n                  left: '50%',\n                  top: '50%',\n                  transform: 'translate(-50%, -50%)'\n                }}\n              >\n                <path\n                  d=\"M 3.492 3.492 C 3.98 3.004 4.77 3.004 5.258 3.492 L 10 8.232 L 14.742 3.49 C 15.232 3.017 16.012 3.024 16.494 3.506 C 16.976 3.988 16.982 4.768 16.508 5.258 L 11.768 10 L 16.51 14.742 C 16.983 15.232 16.976 16.012 16.494 16.494 C 16.012 16.976 15.232 16.982 14.742 16.508 L 10 11.768 L 5.258 16.51 C 4.768 16.983 3.988 16.976 3.506 16.494 C 3.024 16.012 3.018 15.232 3.492 14.742 L 8.232 10 L 3.49 5.258 C 3.003 4.77 3.003 3.98 3.49 3.492 Z\"\n                  fill=\"rgb(255, 255, 255)\"\n                />\n              </svg>\n            </motion.div>\n          </motion.div>\n        </motion.div>\n\n        {/* Gooey Effect */}\n        <GooeyEffect intensity={7} />\n      </div>\n    </MotionConfig>\n  );\n};\n\n// Utility functions\nfunction generateRandomString(): string {\n  const characters = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';\n  let result = '';\n  for (let i = 0; i < 8; i++) {\n    const randomIndex = Math.floor(Math.random() * characters.length);\n    result += characters.charAt(randomIndex);\n  }\n  return result;\n}\n\nfunction hash(str: string): string {\n  let hash = 0;\n  if (str.length === 0) return hash.toString();\n  for (let i = 0; i < str.length; i++) {\n    const char = str.charCodeAt(i);\n    hash = ((hash << 5) - hash) + char;\n    hash = hash & hash; // Convert to 32-bit integer\n  }\n  return Math.abs(hash).toString();\n}\n\nexport default DeleteButton;",
      "type": "registry:ui",
      "target": "components/fancy/components/goey-button.tsx"
    }
  ]
}