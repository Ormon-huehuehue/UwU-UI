{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "copy-button",
  "type": "registry:ui",
  "dependencies": [
    "lucide-react",
    "motion"
  ],
  "author": "daniel petho <https://www.danielpetho.com>",
  "registryDependencies": [
    "button"
  ],
  "files": [
    {
      "path": "components/copy-button.tsx",
      "content": "\"use client\"\n\nimport React, { useState, useRef } from 'react';\nimport { Copy } from 'lucide-react';\nimport { Button } from \"@/components/ui/button\";\nimport { motion, Variants } from 'motion/react';\n\ninterface CopyButtonProps {\n  onCopy: () => Promise<void> | void;\n}\n\nconst copyIconVariants: Variants = {\n  idle: { \n    opacity: 1,\n    scale: 1,\n    transition: { duration: 0.2, ease: \"easeOut\" }\n  },\n  copying: { \n    opacity: 0,\n    scale: 0.8,\n    transition: { duration: 0.2, ease: \"easeOut\" }\n  },\n  copied: { \n    opacity: 0,\n    scale: 0.8,\n    transition: { duration: 0.2, ease: \"easeOut\" }\n  }\n};\n\nconst checkIconVariants: Variants = {\n  idle: {\n    opacity: 0,\n    scale: 0.8,\n    transition: { duration: 0.2, ease: \"easeOut\" }\n  },\n  copying: {\n    opacity: 0,\n    scale: 0.8,\n    transition: { duration: 0.2, ease: \"easeOut\" }\n  },\n  copied: {\n    opacity: 1,\n    scale: 1,\n    transition: { duration: 0.2, ease: \"easeOut\" }\n  }\n};\n\nconst checkPathVariants: Variants = {\n  idle: { \n    pathLength: 0,\n    opacity: 0,\n    transition: { duration: 0.2, ease: \"easeOut\" }\n  },\n  copying: { \n    pathLength: 0,\n    opacity: 1,\n    transition: { duration: 0.2, ease: \"easeOut\" }\n  },\n  copied: { \n    pathLength: 1,\n    opacity: 1,\n    transition: { duration: 0.3, ease: \"easeOut\" }\n  }\n};\n\nconst MotionButton = motion.create(Button);\n\nexport const CopyButton: React.FC<CopyButtonProps> = ({ onCopy }) => {\n  const [status, setStatus] = useState<\"idle\" | \"copying\" | \"copied\">(\"idle\");\n  const [backgroundState, setBackgroundState] = useState<\"hidden\" | \"entering\" | \"centered\" | \"leaving\">(\"hidden\");\n  const [entryDirection, setEntryDirection] = useState({ x: 0, y: 0 });\n  const [leaveDirection, setLeaveDirection] = useState({ x: 0, y: 0 });\n  const buttonRef = useRef<HTMLButtonElement>(null);\n\n  const handleCopy = async () => {\n    if (status !== \"idle\") return;\n    \n    setStatus(\"copying\");\n    await onCopy();\n    \n    setTimeout(() => {\n      setStatus(\"copied\");\n    }, 100);\n    \n    setTimeout(() => {\n      setStatus(\"idle\");\n    }, 2000);\n  };\n\n  const calculateDirection = (e: React.MouseEvent<HTMLButtonElement>) => {\n    if (!buttonRef.current) return { x: 0, y: 0 };\n    \n    const rect = buttonRef.current.getBoundingClientRect();\n    const centerX = rect.left + rect.width / 2;\n    const centerY = rect.top + rect.height / 2;\n    \n    const mouseX = e.clientX;\n    const mouseY = e.clientY;\n    \n    const offsetX = mouseX - centerX;\n    const offsetY = mouseY - centerY;\n  \n    \n    return { x: offsetX, y: offsetY };\n  };\n\n  const handleMouseEnter = (e: React.MouseEvent<HTMLButtonElement>) => {\n    const direction = calculateDirection(e);\n    setEntryDirection(direction);\n    \n    // phase 1: instantly spawn at cursor position\n    setBackgroundState(\"entering\");\n    \n    // phase 2: animate to center after a brief moment\n    setTimeout(() => {\n      setBackgroundState(\"centered\");\n    }, 10);\n  };\n\n  const handleMouseLeave = (e: React.MouseEvent<HTMLButtonElement>) => {\n    const direction = calculateDirection(e);\n    setLeaveDirection(direction);\n    \n    // phase 3: animate to leave direction\n    setBackgroundState(\"leaving\");\n    \n    // reset to hidden after animation completes\n    setTimeout(() => {\n      setBackgroundState(\"hidden\");\n    }, 150);\n  };\n\n  const getBackgroundAnimation = () => {\n    switch (backgroundState) {\n      case \"hidden\":\n        return {\n          opacity: 0,\n          x: entryDirection.x,\n          y: entryDirection.y,\n          scale: 0.6,\n          transition: { duration: 0 }\n        };\n      case \"entering\":\n        return {\n          opacity: 0,\n          x: entryDirection.x,\n          y: entryDirection.y,\n          scale: 0.6,\n          transition: { duration: 0 }\n        };\n      case \"centered\":\n        return {\n          opacity: 1,\n          x: 0,\n          y: 0,\n          scale: 1,\n          transition: { duration: 0.15, ease: \"easeOut\" }\n        };\n      case \"leaving\":\n        return {\n          opacity: 0,\n          x: leaveDirection.x,\n          y: leaveDirection.y,\n          scale: 1,\n          transition: { duration: 0.15, ease: \"easeOut\" }\n        };\n      default:\n        return {\n          opacity: 0,\n          x: 0,\n          y: 0,\n          scale: 0.6,\n          transition: { duration: 0 }\n        };\n    }\n  };\n\n  return (\n    <div className=\"relative\">\n      {/* animated Background */}\n      <motion.div\n        className=\"absolute inset-0 bg-editor-border rounded-md\"\n        animate={getBackgroundAnimation()}\n      />\n      \n      <MotionButton\n        ref={buttonRef}\n        onClick={handleCopy}\n        onMouseEnter={handleMouseEnter}\n        onMouseLeave={handleMouseLeave}\n        variant=\"ghost\"\n        size=\"icon\"\n        className=\"relative text-muted-foreground cursor-pointer w-8 h-8 hover:text-white hover:scale-105 duration-300 transition ease-out hover:bg-transparent bg-none\"\n        aria-label=\"Copy code\"\n        whileTap={{ scale: 0.9 }}\n        transition={{ type: \"spring\", stiffness: 400, damping: 30 }}\n        // disabled={status !== \"idle\"}\n      >\n        <div className=\"relative w-4 h-4\">\n          {/* Copy Icon */}\n          <motion.div\n            className=\"absolute inset-0 flex items-center justify-center\"\n            animate={status}\n            variants={copyIconVariants}\n          >\n            <Copy className=\"w-4 h-4\" />\n          </motion.div>\n          \n          {/* Check Icon */}\n          <motion.div\n            className=\"absolute inset-0 flex items-center justify-center\"\n            animate={status}\n            variants={checkIconVariants}\n          >\n            <svg\n              xmlns=\"http://www.w3.org/2000/svg\"\n              width={16}\n              height={16}\n              viewBox=\"0 0 24 24\"\n              fill=\"none\"\n              stroke=\"white\"\n              strokeWidth=\"2\"\n              strokeLinecap=\"round\"\n              strokeLinejoin=\"round\"\n            >\n              <motion.path\n                d=\"M4 12 9 17L20 6\"\n                animate={status}\n                variants={checkPathVariants}\n              />\n            </svg>\n          </motion.div>\n        </div>\n      </MotionButton>\n    </div>\n  );\n};",
      "type": "registry:ui",
      "target": "components/fancy/components/copy-button.tsx"
    }
  ]
}