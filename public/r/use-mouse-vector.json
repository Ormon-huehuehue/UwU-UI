{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "use-mouse-vector",
  "type": "registry:hook",
  "dependencies": [],
  "author": "daniel petho <https://www.danielpetho.com>",
  "files": [
    {
      "path": "hooks/use-mouse-vector.ts",
      "content": "import { RefObject, useEffect, useState } from \"react\"\n\nexport const useMouseVector = (\n  containerRef?: RefObject<HTMLElement | SVGElement>\n) => {\n  const [position, setPosition] = useState({ x: 0, y: 0 })\n  const [vector, setVector] = useState({ dx: 0, dy: 0 })\n\n  useEffect(() => {\n    let lastPosition = { x: 0, y: 0 }\n\n    const updatePosition = (x: number, y: number) => {\n      let newX, newY\n\n      if (containerRef && containerRef.current) {\n        const rect = containerRef.current.getBoundingClientRect()\n        newX = x - rect.left\n        newY = y - rect.top\n      } else {\n        newX = x\n        newY = y\n      }\n\n      // Calculate the movement vector\n      const dx = newX - lastPosition.x\n      const dy = newY - lastPosition.y\n\n      setVector({ dx, dy })\n      setPosition({ x: newX, y: newY })\n      lastPosition = { x: newX, y: newY }\n    }\n\n    const handleMouseMove = (ev: MouseEvent) => {\n      updatePosition(ev.clientX, ev.clientY)\n    }\n\n    const handleTouchMove = (ev: TouchEvent) => {\n      const touch = ev.touches[0]\n      updatePosition(touch.clientX, touch.clientY)\n    }\n\n    // Listen for both mouse and touch events\n    window.addEventListener(\"mousemove\", handleMouseMove)\n    window.addEventListener(\"touchmove\", handleTouchMove)\n\n    return () => {\n      window.removeEventListener(\"mousemove\", handleMouseMove)\n      window.removeEventListener(\"touchmove\", handleTouchMove)\n    }\n  }, [containerRef])\n\n  return { position, vector }\n}\n",
      "type": "registry:hook",
      "target": "hooks/use-mouse-vector.ts"
    }
  ]
}