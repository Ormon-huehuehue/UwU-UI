{
  "files": [
    {
      "path": "src/components/backup-button.tsx",
      "content": "'use client';\n\nimport React, { useState, useEffect } from 'react';\nimport { motion, AnimatePresence } from 'framer-motion';\n\ninterface ButtonProps {\n  variant?: 'backup' | 'backing-up' | 'done';\n  onClick?: () => void;\n  className?: string;\n  style?: React.CSSProperties;\n}\n\ninterface LoaderProps {\n  variant?: 'loading' | 'complete' | 'idle';\n  check?: number;\n}\n\n// Loader Component\nconst Loader: React.FC<LoaderProps> = ({ variant = 'loading', check = 0 }) => {\n  const [currentVariant, setCurrentVariant] = useState(variant);\n\n  useEffect(() => {\n    setCurrentVariant(variant);\n    if (variant === 'loading') {\n      const timer = setTimeout(() => {\n        setCurrentVariant('complete');\n      }, 3000);\n      return () => clearTimeout(timer);\n    }\n  }, [variant]);\n\n  const isLoading = currentVariant === 'loading';\n  const isComplete = currentVariant === 'complete';\n\n  return (\n    <div style={{ width: '20px', height: '20px', position: 'relative', overflow: 'visible' }}>\n      {/* Check Icon */}\n      <motion.div\n        initial={{ opacity: check, scale: 0.2 }}\n        animate={{ \n          opacity: isComplete ? 1 : check,\n          scale: isComplete ? 1 : currentVariant === 'idle' ? 1 : 0.2\n        }}\n        transition={{ duration: 0.25, ease: [0.44, 0, 0.56, 1] }}\n        style={{\n          position: 'absolute',\n          top: '50%',\n          left: '50%',\n          transform: 'translate(-50%, -50%)',\n          width: '20px',\n          height: '20px',\n          overflow: 'hidden'\n        }}\n      >\n        <div style={{ position: 'absolute', top: 0, left: 0, right: 0, bottom: 0 }}>\n          <svg width=\"20\" height=\"20\" viewBox=\"0 0 20 20\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n            <path \n              fillRule=\"evenodd\" \n              clipRule=\"evenodd\" \n              d=\"M10 0C4.47656 0 0 4.47656 0 10C0 15.5234 4.47656 20 10 20C15.5234 20 20 15.5234 20 10C20 4.47656 15.5234 0 10 0ZM14.7344 7.68359L15.4141 6.95312L13.9531 5.58594L13.2656 6.31641L8.35156 11.5859L6.6875 10.0195L5.95312 9.33594L4.58594 10.7969L5.3125 11.4805L7.71875 13.7305L8.44531 14.4141L9.13281 13.6836L14.7344 7.68359Z\" \n              fill=\"#D9D9D9\"\n            />\n          </svg>\n        </div>\n      </motion.div>\n\n      {/* Loading Circle - only show when loading */}\n      {isLoading && (\n        <div style={{ \n          position: 'absolute', \n          top: 0, \n          left: 0, \n          right: 5, \n          bottom: 18, \n          overflow: 'visible' \n        }}>\n          {/* Static outer circle */}\n          <div style={{\n            position: 'absolute',\n            top: '50%',\n            left: '50%',\n            transform: 'translate(-50%, -50%)',\n            width: '20px',\n            height: '20px'\n          }}>\n            <svg width=\"20\" height=\"20\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n              <circle cx=\"10\" cy=\"10\" r=\"8.5\" stroke=\"#fff\" strokeOpacity=\"0.6\" strokeWidth=\"3\" fill=\"none\"/>\n            </svg>\n          </div>\n          \n          {/* Animated spinning arc */}\n          <motion.div\n            animate={{ rotate: 360 }}\n            transition={{\n              duration: 0.7,\n              ease: [0.79, 0.07, 0.47, 1],\n              repeat: Infinity,\n              repeatType: 'loop'\n            }}\n            style={{ \n              position: 'absolute', \n              top: 0, \n              left: 0, \n              right: 0, \n              bottom: 0,\n              overflow: 'hidden'\n            }}\n          >\n            <div style={{\n              position: 'absolute',\n              top: '25%',\n              left: '75%',\n              transform: 'translate(-50%, -50%)',\n              width: '10px',\n              height: '10px'\n            }}>\n              <svg width=\"10\" height=\"10\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n                <path d=\"M0 1.5A8.5 8.5 0 0 1 8.5 10\" stroke=\"#fff\" strokeWidth=\"3\"/>\n              </svg>\n            </div>\n          </motion.div>\n        </div>\n      )}\n    </div>\n  );\n};\n\n// Main Button Component\nconst BackupButton: React.FC<ButtonProps> = ({ \n  variant = 'backup', \n  onClick,\n  className = '',\n  style = {}\n}) => {\n  const [currentVariant, setCurrentVariant] = useState(variant);\n  const [loaderCheck, setLoaderCheck] = useState(0);\n\n  const handleClick = () => {\n    if (currentVariant === 'backup') {\n      setCurrentVariant('backing-up');\n      setLoaderCheck(0);\n      \n      // Auto transition to done after 2.8 seconds\n      setTimeout(() => {\n        setCurrentVariant('done');\n        setLoaderCheck(1);\n      }, 2800);\n\n      // Auto reset to backup after 1.5 seconds in done state\n      setTimeout(() => {\n        setCurrentVariant('backup');\n        setLoaderCheck(0);\n      }, 4300); // 2800 + 1500\n    }\n    \n    onClick?.();\n  };\n\n  const getButtonText = () => {\n    switch (currentVariant) {\n      case 'backing-up':\n        return 'Backing Up';\n      case 'done':\n        return 'Done';\n      default:\n        return 'Back Up Now';\n    }\n  };\n\n  const getLoaderVariant = () => {\n    switch (currentVariant) {\n      case 'backing-up':\n        return 'loading';\n      case 'done':\n        return 'complete';\n      default:\n        return 'idle';\n    }\n  };\n\n  const showLoader = currentVariant === 'backing-up' || currentVariant === 'done';\n\n  return (\n    <motion.button\n      className={`backup-button ${className}`}\n      onClick={handleClick}\n      initial={{ opacity: 1 }}\n      whileHover={{ scale: 1.02 }}\n      whileTap={{ scale: 0.98 }}\n      transition={{ duration: 0.25, ease: [0.12, 0.23, 0.5, 1] }}\n      style={{\n        backgroundColor: 'rgb(8, 189, 113)',\n        borderRadius: '1000px',\n        border: 'none',\n        boxShadow: 'inset 0px 1px 0px 0px rgba(255, 255, 255, 0.2), inset 0px -1px 0px 0px rgba(0, 0, 0, 0.15)',\n        color: 'white',\n        fontSize: '14px',\n        fontWeight: 600,\n        fontFamily: '\"Inter\", \"Inter Placeholder\", sans-serif',\n        height: '50px',\n        padding: '0 18px',\n        display: 'flex',\n        alignItems: 'center',\n        justifyContent: 'center',\n        gap: '8px',\n        cursor: 'pointer',\n        position: 'relative',\n        textShadow: '0px 0.5px 0px rgba(0, 0, 0, 0.15)',\n        minWidth: '134.5px',\n        ...style\n      }}\n    >\n      {/* Loader Icon - absolutely positioned when showing */}\n      <AnimatePresence>\n        {showLoader && (\n          <motion.div\n            initial={{ opacity: 0, scale: 0.6 }}\n            animate={{ opacity: 1, scale: 1 }}\n            exit={{ opacity: 0, scale: 0.6 }}\n            transition={{ duration: 0.25 }}\n            style={{\n              position: 'absolute',\n              left: '18px',\n              top: '50%',\n              transform: 'translateY(-50%)',\n              width: '20px',\n              height: '20px',\n              zIndex: 1,\n              pointerEvents: 'none'\n            }}\n          >\n            <Loader \n              variant={getLoaderVariant()}\n              check={loaderCheck}\n            />\n          </motion.div>\n        )}\n      </AnimatePresence>\n\n      {/* Button Text */}\n      <span style={{ position: 'relative', zIndex: 0 }}>\n        {getButtonText()}\n      </span>\n\n      {/* Animated Ring - only show in backup state */}\n      {currentVariant === 'backup' && (\n        <motion.div\n          className=\"animated-ring\"\n          initial={{ opacity: 1 }}\n          animate={{ opacity: 0 }}\n          transition={{ \n            duration: 0.7, \n            ease: [0.5, 0, 0.88, 0.77], \n            repeat: Infinity, \n            repeatType: 'mirror' \n          }}\n          style={{\n            position: 'absolute',\n            top: '-6px',\n            left: '-6px',\n            right: '-6px',\n            bottom: '-6px',\n            border: '2px solid rgb(8, 189, 113)',\n            borderRadius: '1000px',\n            pointerEvents: 'none',\n            zIndex: 1\n          }}\n        />\n      )}\n    </motion.button>\n  );\n};\n\nexport default BackupButton;"
    }
  ]
}
